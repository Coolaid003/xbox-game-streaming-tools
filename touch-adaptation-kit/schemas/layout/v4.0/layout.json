{
  "required": [
    "content"
  ],
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "properties": {
    "styles": {
      "$ref": "#/$defs/LayoutStyles"
    },
    "orientation": {
      "$ref": "#/$defs/LayoutOrientation"
    },
    "$schema": {
      "type": "string"
    },
    "definitions": {
      "$ref": "#/$defs/Definitions"
    },
    "content": {
      "$ref": "#/$defs/LayoutContent"
    }
  },
  "title": "Touch Adaptation Bundle Layout Schema",
  "description": "A touch adaptation bundle layout represents a game scenario and all of the controls needed to allow mobile or touch game-play. For the latest information on the changes between layout versions, see https://github.com/microsoft/xbox-game-streaming-tools/releases.",
  "markdownDescription": "A touch adaptation bundle layout represents a game scenario and all of the controls needed to allow mobile or touch game-play. For the latest information on the changes between layout versions, see https://github.com/microsoft/xbox-game-streaming-tools/releases.",
  "additionalProperties": false,
  "$id": "https://raw.githubusercontent.com/microsoft/xbox-game-streaming-tools/main/touch-adaptation-kit/schemas/layout/v4.0/layout.json",
  "$defs": {
    "DirectionalPadDefaultStyle": {
      "examples": [
        {},
        {
          "gradient": {
            "color": "#0099ffaa"
          },
          "stroke": {
            "color": "#0099ff",
            "type": "solid",
            "opacity": 1
          }
        },
        {
          "$ref": "#/definitions/commonDPadStyle"
        }
      ],
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "fill": {
              "$ref": "#/$defs/FillColor"
            },
            "stroke": {
              "$ref": "#/$defs/Stroke"
            },
            "gradient": {
              "$ref": "#/$defs/Gradient"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "Definitions": {
      "markdownDescription": "A section that can be used to contain reusable components and values for touch layouts. These definitions can be later referenced with a JSON reference like `{ \"$ref\": \"#/definitions/joystickKnobStyle\" }`. JSON references are supported for nearly every part of the layout schema enabling common elements, like a common button background used across several controls, to be factored out and reused. Note that the context file also supports the `definitions` property, as well as `state`, to reuse components across layouts.",
      "additionalProperties": false,
      "description": "A section that can be used to contain reusable components and values for touch layouts. These definitions can be later referenced with a JSON reference like `{ \"$ref\": \"#/definitions/joystickKnobStyle\" }`. JSON references are supported for nearly every part of the layout schema enabling common elements, like a common button background used across several controls, to be factored out and reused. Note that the context file also supports the `definitions` property, as well as `state`, to reuse components across layouts.",
      "title": "Definitions",
      "examples": [
        {},
        {
          "joystickKnob": {
            "default": {
              "knob": {
                "faceImage": {
                  "type": "asset",
                  "value": {
                    "$ref": "#/definitions/joystickAssetName"
                  }
                }
              }
            }
          },
          "joystickAssetName": "exampleAssetName"
        }
      ],
      "patternProperties": {
        "^(?!__proto__)[a-zA-Z0-9\\.\\-_]+$": {
          "$ref": "#/$defs/LayoutDefinableType"
        }
      },
      "type": "object"
    },
    "_InputAxisXY": {
      "description": "Uses interactions in the X and Y axis of the control to translate to the specified output. See the `output` property for more information on this mapping.",
      "title": "X and Y Axis Input Mapping",
      "type": "string",
      "const": "axisXY",
      "markdownDescription": "Uses interactions in the X and Y axis of the control to translate to the specified output. See the `output` property for more information on this mapping."
    },
    "LayerControlGroupItem": {
      "description": "A single item in the layer control group. Use `null` to skip a control in the arrangement or `blank` to hide up the control from the layer(s) underneath.",
      "anyOf": [
        {
          "$ref": "#/$defs/_LayerControlBase"
        },
        {
          "$ref": "#/$defs/_Null"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Layer Control Group Item",
      "examples": [
        {
          "$ref": "#/definitions/commonLayerButtonControl"
        }
      ],
      "markdownDescription": "A single item in the layer control group. Use `null` to skip a control in the arrangement or `blank` to hide up the control from the layer(s) underneath."
    },
    "Indicator": {
      "description": "The visual styling for the stroke used to indicate the current value or placement of the control.",
      "title": "Indicator Styling Component",
      "$ref": "#/$defs/_StrokeBase",
      "markdownDescription": "The visual styling for the stroke used to indicate the current value or placement of the control."
    },
    "FaceImage": {
      "description": "The visual styling that represents the foreground of the control component. This is typically used to show the semantic meaning of interacting with it. The face image can be an `icon` or `asset` type. Icons are built-in graphics that can express a wide variety of control actions while assets allow a control to use a custom image bundled with the layout.",
      "anyOf": [
        {
          "$ref": "#/$defs/_FaceImageIcon"
        },
        {
          "$ref": "#/$defs/_FaceImageAsset"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Face Image Styling Component",
      "examples": [
        {
          "type": "asset",
          "value": "CustomImageForJumpButtonFace"
        },
        {
          "type": "icon",
          "value": "interact"
        },
        {
          "$ref": "#/definitions/commonFaceImageStyling"
        }
      ],
      "markdownDescription": "The visual styling that represents the foreground of the control component. This is typically used to show the semantic meaning of interacting with it. The face image can be an `icon` or `asset` type. Icons are built-in graphics that can express a wide variety of control actions while assets allow a control to use a custom image bundled with the layout."
    },
    "ControlGroupItem": {
      "description": "A single item in the control group. Use `null` to skip a control in the arrangement.",
      "anyOf": [
        {
          "$ref": "#/$defs/_ControlBase"
        },
        {
          "$ref": "#/$defs/_Null"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Control Group Item",
      "markdownDescription": "A single item in the control group. Use `null` to skip a control in the arrangement."
    },
    "LayoutOrientation": {
      "markdownDescription": "⚠️ Deprecated: This property is no longer supported. Its value is ignored and all layouts use the equivalent of `landscape`.",
      "deprecated": true,
      "enum": [
        "landscape-left",
        "landscape-right",
        "landscape",
        "portrait-up",
        "portrait"
      ],
      "description": "⚠️ Deprecated: This property is no longer supported. Its value is ignored and all layouts use the equivalent of `landscape`.",
      "title": "[DEPRECATED] Layout Orientation",
      "type": "string"
    },
    "PullIndicator": {
      "description": "The visual styling for the indicator that control is currently being pulled. The color of this can be customized to indicate the semantics of pulling the control.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/PullIndicatorBackground"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Pull Indicator Styling Component",
      "examples": [
        {
          "background": {
            "type": "color",
            "value": "#0099ffaa"
          }
        },
        {
          "$ref": "#/definitions/commonPullIndicator"
        }
      ],
      "markdownDescription": "The visual styling for the indicator that control is currently being pulled. The color of this can be customized to indicate the semantics of pulling the control."
    },
    "_ActionTypeBase": {
      "examples": [
        "gamepadB",
        {
          "$ref": "../../context.json#/state/jumpControllerMapping"
        },
        [
          "gamepadA",
          "leftTrigger"
        ]
      ],
      "anyOf": [
        {
          "$ref": "#/$defs/_SingleControlActionAssignableTypes"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/_SingleControlActionAssignableTypes"
          }
        }
      ]
    },
    "_CustomColorPaletteColor": {
      "description": "This property defines a reusable color that can be referenced elsewhere. This color can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes.",
      "title": "Custom Layout Color",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property defines a reusable color that can be referenced elsewhere. This color can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes."
    },
    "ColorPaletteHighContrastVariant": {
      "description": "This property defines a collection of reusable colors that can be referenced elsewhere when High Contrast mode is enabled. A color definition can be specific to the layout's content or override the system's default colors. System colors are prefixed with the reserved `system_` keyword. For any colors that are not defined here or when High Contrast mode is disabled, the corresponding color references will fallback to the colors defined in `default`. Colors can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes.",
      "title": "High Contrast Colors",
      "$ref": "#/$defs/_ColorPaletteBase",
      "markdownDescription": "This property defines a collection of reusable colors that can be referenced elsewhere when High Contrast mode is enabled. A color definition can be specific to the layout's content or override the system's default colors. System colors are prefixed with the reserved `system_` keyword. For any colors that are not defined here or when High Contrast mode is disabled, the corresponding color references will fallback to the colors defined in `default`. Colors can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes."
    },
    "_ControllerAnalogMagnitudinalJoystickOutputType": {
      "description": "Outputs values from 0 to the maximum value along the specified gamepad joystick axis. When used as an `action` as opposed to an `output`, only the maximum value is used.",
      "enum": [
        "leftJoystickRight",
        "leftJoystickLeft",
        "leftJoystickUp",
        "leftJoystickDown",
        "rightJoystickRight",
        "rightJoystickLeft",
        "rightJoystickUp",
        "rightJoystickDown"
      ],
      "title": "Gamepad Analog Joystick Output",
      "type": "string",
      "markdownDescription": "Outputs values from 0 to the maximum value along the specified gamepad joystick axis. When used as an `action` as opposed to an `output`, only the maximum value is used."
    },
    "JoystickStyles": {
      "description": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state.",
      "anyOf": [
        {
          "properties": {
            "default": {
              "$ref": "#/$defs/JoystickDefaultStyle"
            },
            "idle": {
              "$ref": "#/$defs/JoystickIdleStyle"
            },
            "disabled": {
              "$ref": "#/$defs/JoystickDisabledStyle"
            },
            "activated": {
              "$ref": "#/$defs/JoystickActivatedStyle"
            },
            "moving": {
              "$ref": "#/$defs/JoystickMovingStyle"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Styles",
      "examples": [
        {},
        {
          "default": {
            "knob": {
              "background": {
                "type": "asset",
                "value": "CustomKnobBackgroundImage"
              },
              "stroke": {
                "type": "solid",
                "color": "#0099ffaa"
              },
              "faceImage": {
                "type": "asset",
                "value": "CustomKnobFaceImage"
              }
            },
            "background": {
              "type": "asset",
              "value": "CustomJoystickBackgroundImage"
            }
          }
        },
        {
          "$ref": "#/definitions/commonJoystickStyles"
        }
      ],
      "markdownDescription": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state."
    },
    "_InputMappingZY": {
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMappingZYToGamepad2DOutput"
        },
        {
          "$ref": "#/$defs/_InputMappingZYToMouse2DOutput"
        }
      ]
    },
    "LayerControlGroup": {
      "examples": [
        [],
        [
          null,
          {
            "type": "blank"
          },
          null
        ]
      ],
      "description": "A set of 1 to 4 layer controls, including the `blank` control to hide controls from the layer(s) below, arranged in a group. The system determines how to best arrange controls from the group within the available space; a group with only one control is different than an ungrouped control as the group may include a larger total interaction area. Note that a special value of `null` can be used to skip an index. Also note that if a control group from a layer below has a different number of items than this control group, all items from that layer will be hidden.",
      "minItems": 1,
      "title": "Touch Layout Layer Control Group",
      "markdownDescription": "A set of 1 to 4 layer controls, including the `blank` control to hide controls from the layer(s) below, arranged in a group. The system determines how to best arrange controls from the group within the available space; a group with only one control is different than an ungrouped control as the group may include a larger total interaction area. Note that a special value of `null` can be used to skip an index. Also note that if a control group from a layer below has a different number of items than this control group, all items from that layer will be hidden.",
      "type": "array",
      "items": {
        "$ref": "#/$defs/LayerControlGroupItem"
      },
      "maxItems": 4
    },
    "ThrottleAxisOutput": {
      "description": "This property defines a single mapping from a player's interactions with the control either up or down from the midpoint to the specified output.",
      "anyOf": [
        {
          "$ref": "#/$defs/_ControllerAnalogMagnitudinalOutputType"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Throttle Axis",
      "examples": [
        "rightTrigger",
        "leftJoystickUp",
        {
          "$ref": "#/definitions/commonThrottleAxis"
        }
      ],
      "markdownDescription": "This property defines a single mapping from a player's interactions with the control either up or down from the midpoint to the specified output."
    },
    "_InputMappingXYToMouse2DOutput": {
      "properties": {
        "sensitivity": {
          "$ref": "#/$defs/Sensitivity"
        },
        "output": {
          "$ref": "#/$defs/_RelativeMouse2DOutputType"
        },
        "input": {
          "$ref": "#/$defs/_InputAxisXY"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "output"
      ]
    },
    "_Gyroscope": {
      "additionalProperties": false,
      "properties": {
        "axis": {
          "$ref": "#/$defs/AxisMapping3D"
        },
        "type": {
          "description": "A gyroscope control. This control allows a translation from a device's motion, in particular rotations about its axes, into game input. This control can be especially useful for controlling the player's camera since real world rotations naturally can rotate the perspective of the game.",
          "title": "Gyroscope Control Type",
          "type": "string",
          "const": "gyroscope",
          "markdownDescription": "A gyroscope control. This control allows a translation from a device's motion, in particular rotations about its axes, into game input. This control can be especially useful for controlling the player's camera since real world rotations naturally can rotate the perspective of the game."
        },
        "enabled": {
          "$ref": "#/$defs/ControlEnabled"
        }
      },
      "examples": [
        {
          "type": "gyroscope",
          "axis": {
            "input": "axisXY",
            "output": "rightJoystick"
          }
        }
      ],
      "type": "object",
      "required": [
        "type",
        "axis"
      ]
    },
    "LayerLowerArrayContent": {
      "description": "This property defines the content of the layer that is an array growing outward from the bottom center of the available display area. This property operates identically to the same named property of the layout content except that this property additionally allows the `blank` control to be used to hide controls from the layer(s) underneath this one.",
      "anyOf": [
        {
          "minItems": 1,
          "maxItems": 4,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/LayerControl"
              },
              {
                "$ref": "#/$defs/_Null"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Lower Layer Array Content",
      "examples": [
        [
          {
            "type": "blank"
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonLayerLowerLeftCenterContent"
        }
      ],
      "markdownDescription": "This property defines the content of the layer that is an array growing outward from the bottom center of the available display area. This property operates identically to the same named property of the layout content except that this property additionally allows the `blank` control to be used to hide controls from the layer(s) underneath this one."
    },
    "AxisCap": {
      "$ref": "#/$defs/AxisCapColor"
    },
    "_SystemColorContrastSecondary": {
      "description": "This property overrides the contrast secondary system color used for styling contrast components such as touchpad strokes.",
      "title": "Contrast Secondary System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the contrast secondary system color used for styling contrast components such as touchpad strokes."
    },
    "_InputMappingXYToGamepad2DOutput": {
      "properties": {
        "sensitivity": {
          "$ref": "#/$defs/Sensitivity"
        },
        "output": {
          "$ref": "#/$defs/_ControllerAnalog2DOutputType"
        },
        "input": {
          "$ref": "#/$defs/_InputAxisXY"
        },
        "deadzone": {
          "$ref": "#/$defs/Deadzone2D"
        },
        "responseCurve": {
          "$ref": "#/$defs/InputCurve"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "output"
      ]
    },
    "ControllerOnlyActionType": {
      "description": "This property allows either a single gamepad action or an array of gamepad actions to be performed by the control when it is in the `activated` state.",
      "anyOf": [
        {
          "$ref": "#/$defs/_ControllerAction"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Gamepad Action",
      "examples": [
        "gamepadB",
        {
          "$ref": "../../context.json#/state/jumpControllerMapping"
        },
        [
          "gamepadA",
          "leftTrigger"
        ]
      ],
      "markdownDescription": "This property allows either a single gamepad action or an array of gamepad actions to be performed by the control when it is in the `activated` state."
    },
    "_Color": {
      "examples": [
        "#0099ff",
        "#0099ffaa",
        "#09f",
        "#09fa",
        "colors/system_contentPrimary",
        "colors/myColor",
        {
          "$ref": "#/definitions/commonAccentColor"
        }
      ],
      "anyOf": [
        {
          "$ref": "#/$defs/_HexColor"
        },
        {
          "$ref": "#/$defs/_ColorReference"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "ExpandInteraction": {
      "description": "This property determines if the control should expand its interactable area to fill the available space. This is especially useful for the `inner` wheel container where a player can customize the size of the area. When set to `false` the control is locked to its default or minimum interaction size. If omitted, a default value of `true` is used.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Expand",
      "examples": [
        true,
        false,
        {
          "$ref": "../../context.json#/state/playerExpandControlPreference"
        }
      ],
      "markdownDescription": "This property determines if the control should expand its interactable area to fill the available space. This is especially useful for the `inner` wheel container where a player can customize the size of the area. When set to `false` the control is locked to its default or minimum interaction size. If omitted, a default value of `true` is used."
    },
    "ControlEnabled": {
      "description": "Property that determines if a control is in the `disabled` state or not. This property is most useful when used with context file `state` to allow controls to be dynamically enabled and disabled based on game state. If omitted, a default value of `true` is used. When disabled, the control is visible and still forwards along output but has no appearance of being active. Note that this behavior is only true for controls that have an appearance and are rendered on screen. Sensor controls do not forward output when in the disabled state, as they have no appearance.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Enabled",
      "examples": [
        true,
        false,
        {
          "$ref": "../../context.json#/state/hasSpellEquipped"
        }
      ],
      "markdownDescription": "Property that determines if a control is in the `disabled` state or not. This property is most useful when used with context file `state` to allow controls to be dynamically enabled and disabled based on game state. If omitted, a default value of `true` is used. When disabled, the control is visible and still forwards along output but has no appearance of being active. Note that this behavior is only true for controls that have an appearance and are rendered on screen. Sensor controls do not forward output when in the disabled state, as they have no appearance."
    },
    "_ControlTypeButton": {
      "description": "A button control is a simple control type that allows an action to be performed while the control is being pressed. To allow for some advanced functionality, an additional action, known as the pull action, can be assigned when the interaction moves beyond the extent of the control. This is useful in situations where a second, simultaneous action is needed in coordination with the main action of the control like aiming while shooting.",
      "title": "Button Control Type",
      "type": "string",
      "const": "button",
      "markdownDescription": "A button control is a simple control type that allows an action to be performed while the control is being pressed. To allow for some advanced functionality, an additional action, known as the pull action, can be assigned when the interaction moves beyond the extent of the control. This is useful in situations where a second, simultaneous action is needed in coordination with the main action of the control like aiming while shooting."
    },
    "PullIndicatorBackground": {
      "description": "A color used to style the background. The exact shape where the color is used depends on the component and cannot be customized.",
      "anyOf": [
        {
          "$ref": "#/$defs/_BackgroundColor"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Background Styling Component",
      "examples": [
        {
          "$ref": "#/definitions/commonPullIndicatorBackground"
        }
      ],
      "markdownDescription": "A color used to style the background. The exact shape where the color is used depends on the component and cannot be customized."
    },
    "PullActionType": {
      "description": "This property allows either a single action or array of actions to be performed by the control when it is in the `pulled` state. These actions can map to gamepad inputs or to more complex actions like showing a new layer on the layout.",
      "title": "Control Pull Action",
      "$ref": "#/$defs/_ActionTypeBase",
      "markdownDescription": "This property allows either a single action or array of actions to be performed by the control when it is in the `pulled` state. These actions can map to gamepad inputs or to more complex actions like showing a new layer on the layout."
    },
    "ControlGroup": {
      "markdownDescription": "A set of 1 to 4 controls arranged in a group. The system determines how to best arrange controls from the group within the available space; a group with only one control is different than an ungrouped control as the group may include a larger total interaction area. Note that a special value of `null` can be used to skip a control in the arrangement.",
      "items": {
        "$ref": "#/$defs/ControlGroupItem"
      },
      "description": "A set of 1 to 4 controls arranged in a group. The system determines how to best arrange controls from the group within the available space; a group with only one control is different than an ungrouped control as the group may include a larger total interaction area. Note that a special value of `null` can be used to skip a control in the arrangement.",
      "title": "Touch Layout Control Group",
      "examples": [
        [
          {
            "type": "button",
            "action": "gamepadX"
          },
          {
            "type": "button",
            "action": "gamepadY"
          }
        ],
        {
          "$ref": "#/definitions/commonControlGroup"
        }
      ],
      "anyOf": [
        {
          "maxItems": 4,
          "minItems": 1,
          "type": "array"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "LayerSensorContent": {
      "description": "This property defines a container of layer content that uses the device's sensor inputs as interactions. The `blank` control can be used to hide or turn off sensor controls from the layer(s) underneath this one.",
      "anyOf": [
        {
          "minItems": 1,
          "maxItems": 4,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/SensorLayerControl"
              },
              {
                "$ref": "#/$defs/_Null"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Sensors Layer Content",
      "examples": [
        [
          {
            "type": "blank"
          },
          {
            "type": "gyroscope",
            "axis": {
              "input": "axisXY",
              "output": "rightJoystick"
            }
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonLayerSensors"
        }
      ],
      "markdownDescription": "This property defines a container of layer content that uses the device's sensor inputs as interactions. The `blank` control can be used to hide or turn off sensor controls from the layer(s) underneath this one."
    },
    "ButtonActivatedStyle": {
      "description": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "pullIndicator": {
              "$ref": "#/$defs/PullIndicator"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Activated Style",
      "examples": [
        {},
        {
          "faceImage": {
            "type": "icon",
            "value": "interact"
          }
        },
        {
          "$ref": "#/definitions/commonButtonStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed."
    },
    "_InputMapping1DToGamepad1DOutput": {
      "properties": {
        "sensitivity": {
          "$ref": "#/$defs/Sensitivity"
        },
        "output": {
          "$ref": "#/$defs/_ControllerAnalog1DOutputType"
        },
        "input": {
          "$ref": "#/$defs/_InputAxis1D"
        },
        "deadzone": {
          "$ref": "#/$defs/Deadzone1D"
        },
        "responseCurve": {
          "$ref": "#/$defs/InputCurve"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "output"
      ]
    },
    "LayoutDefinableType": {
      "description": "Union type that includes all types which can be used in the `definitions` section of this file. See the `definitions` section for more information",
      "anyOf": [
        {
          "$ref": "#/$defs/ActionThreshold"
        },
        {
          "$ref": "#/$defs/ActionType"
        },
        {
          "$ref": "#/$defs/ArcadeButton"
        },
        {
          "$ref": "#/$defs/ArcadeButtonStyleBase"
        },
        {
          "$ref": "#/$defs/ArcadeButtonStyles"
        },
        {
          "$ref": "#/$defs/AssetReference"
        },
        {
          "$ref": "#/$defs/AxisCap"
        },
        {
          "$ref": "#/$defs/AxisCapColor"
        },
        {
          "$ref": "#/$defs/AxisMapping2D"
        },
        {
          "$ref": "#/$defs/AxisMapping3D"
        },
        {
          "$ref": "#/$defs/Background"
        },
        {
          "$ref": "#/$defs/BackgroundAssetValue"
        },
        {
          "$ref": "#/$defs/ButtonStyles"
        },
        {
          "$ref": "#/$defs/ButtonActivatedStyle"
        },
        {
          "$ref": "#/$defs/ButtonDefaultStyle"
        },
        {
          "$ref": "#/$defs/ButtonDisabledStyle"
        },
        {
          "$ref": "#/$defs/ButtonIdleStyle"
        },
        {
          "$ref": "#/$defs/ButtonToggledStyle"
        },
        {
          "$ref": "#/$defs/ButtonPulledStyle"
        },
        {
          "$ref": "#/$defs/Color"
        },
        {
          "$ref": "#/$defs/ColorPaletteDefaultVariant"
        },
        {
          "$ref": "#/$defs/ColorPaletteHighContrastVariant"
        },
        {
          "$ref": "#/$defs/Control"
        },
        {
          "$ref": "#/$defs/ControlEnabled"
        },
        {
          "$ref": "#/$defs/ControlGroup"
        },
        {
          "$ref": "#/$defs/ControlGroupItem"
        },
        {
          "$ref": "#/$defs/ControllerOnlyActionType"
        },
        {
          "$ref": "#/$defs/ControlVisibility"
        },
        {
          "$ref": "#/$defs/Deadzone1D"
        },
        {
          "$ref": "#/$defs/Deadzone2D"
        },
        {
          "$ref": "#/$defs/DeadzoneDirectionalPad"
        },
        {
          "$ref": "#/$defs/DeadzoneRadial"
        },
        {
          "$ref": "#/$defs/DeadzoneThreshold"
        },
        {
          "$ref": "#/$defs/DirectionalPadDefaultStyle"
        },
        {
          "$ref": "#/$defs/DirectionalPadIdleStyle"
        },
        {
          "$ref": "#/$defs/DirectionalPadInteraction"
        },
        {
          "$ref": "#/$defs/DirectionalPadInteractionActivationType"
        },
        {
          "$ref": "#/$defs/DirectionalPadStyles"
        },
        {
          "$ref": "#/$defs/ExpandInteraction"
        },
        {
          "$ref": "#/$defs/FaceImage"
        },
        {
          "$ref": "#/$defs/FaceImageAssetValue"
        },
        {
          "$ref": "#/$defs/FaceImageIconLabel"
        },
        {
          "$ref": "#/$defs/FaceImageIconValue"
        },
        {
          "$ref": "#/$defs/FillColor"
        },
        {
          "$ref": "#/$defs/Gradient"
        },
        {
          "$ref": "#/$defs/Indicator"
        },
        {
          "$ref": "#/$defs/InnerLayoutControlWheel"
        },
        {
          "$ref": "#/$defs/InnerLayerControlWheel"
        },
        {
          "$ref": "#/$defs/InputCurveRange"
        },
        {
          "$ref": "#/$defs/InputCurve"
        },
        {
          "$ref": "#/$defs/InputCurveType"
        },
        {
          "$ref": "#/$defs/JoystickActivatedStyle"
        },
        {
          "$ref": "#/$defs/JoystickDefaultStyle"
        },
        {
          "$ref": "#/$defs/JoystickDirectionIndicator"
        },
        {
          "$ref": "#/$defs/JoystickDisabledStyle"
        },
        {
          "$ref": "#/$defs/JoystickIdleStyle"
        },
        {
          "$ref": "#/$defs/JoystickMovingStyle"
        },
        {
          "$ref": "#/$defs/JoystickOutlineWithIndicator"
        },
        {
          "$ref": "#/$defs/JoystickOutlineWithoutIndicator"
        },
        {
          "$ref": "#/$defs/JoystickStyles"
        },
        {
          "$ref": "#/$defs/Knob"
        },
        {
          "$ref": "#/$defs/Layer"
        },
        {
          "$ref": "#/$defs/Layers"
        },
        {
          "$ref": "#/$defs/LayerControl"
        },
        {
          "$ref": "#/$defs/LayerControlGroup"
        },
        {
          "$ref": "#/$defs/LayerControlGroupItem"
        },
        {
          "$ref": "#/$defs/LayerControlWheel"
        },
        {
          "$ref": "#/$defs/LayerLowerArrayContent"
        },
        {
          "$ref": "#/$defs/LayerLowerContent"
        },
        {
          "$ref": "#/$defs/LayerSensorContent"
        },
        {
          "$ref": "#/$defs/LayerUpperContent"
        },
        {
          "$ref": "#/$defs/LayerUpperRightContent"
        },
        {
          "$ref": "#/$defs/LayoutContent"
        },
        {
          "$ref": "#/$defs/LayoutControlWheel"
        },
        {
          "$ref": "#/$defs/LayoutColors"
        },
        {
          "$ref": "#/$defs/LayoutOrientation"
        },
        {
          "$ref": "#/$defs/LayoutLowerArrayContent"
        },
        {
          "$ref": "#/$defs/LayoutLowerContent"
        },
        {
          "$ref": "#/$defs/LayoutSensorContent"
        },
        {
          "$ref": "#/$defs/LayoutUpperContent"
        },
        {
          "$ref": "#/$defs/LayoutUpperRightContent"
        },
        {
          "$ref": "#/$defs/_Null"
        },
        {
          "$ref": "#/$defs/Opacity"
        },
        {
          "$ref": "#/$defs/OuterLayoutControlWheel"
        },
        {
          "$ref": "#/$defs/OuterWheelControlGroup"
        },
        {
          "$ref": "#/$defs/OuterLayerControlWheel"
        },
        {
          "$ref": "#/$defs/OuterWheelLayerControlGroup"
        },
        {
          "$ref": "#/$defs/PullActionType"
        },
        {
          "$ref": "#/$defs/PullIndicator"
        },
        {
          "$ref": "#/$defs/RelativeInteraction"
        },
        {
          "$ref": "#/$defs/RenderAsButton"
        },
        {
          "$ref": "#/$defs/Scale"
        },
        {
          "$ref": "#/$defs/Sensitivity"
        },
        {
          "$ref": "#/$defs/SensorControl"
        },
        {
          "$ref": "#/$defs/Sticky"
        },
        {
          "$ref": "#/$defs/Stroke"
        },
        {
          "$ref": "#/$defs/LayoutStyles"
        },
        {
          "$ref": "#/$defs/ThrottleAxisOutput"
        },
        {
          "$ref": "#/$defs/ThrottleAxisStyle"
        },
        {
          "$ref": "#/$defs/ThrottleStyleBase"
        },
        {
          "$ref": "#/$defs/ThrottleStyles"
        },
        {
          "$ref": "#/$defs/Toggle"
        },
        {
          "$ref": "#/$defs/TouchpadStyleBase"
        },
        {
          "$ref": "#/$defs/TouchpadStyles"
        }
      ],
      "title": "Definable Types",
      "markdownDescription": "Union type that includes all types which can be used in the `definitions` section of this file. See the `definitions` section for more information"
    },
    "_InputMapping1DToRelativeMouse1DOutput": {
      "anyOf": [
        {
          "properties": {
            "sensitivity": {
              "$ref": "#/$defs/Sensitivity"
            },
            "output": {
              "$ref": "#/$defs/_RelativeMouse1DOutputType"
            },
            "input": {
              "$ref": "#/$defs/_InputAxis1D"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "input",
            "output"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "_InputMappingMagnitudinalToRelativeMouseMagnitudinalOutput": {
      "anyOf": [
        {
          "properties": {
            "sensitivity": {
              "$ref": "#/$defs/Sensitivity"
            },
            "output": {
              "$ref": "#/$defs/_RelativeMouseMagnitudinalOutputType"
            },
            "input": {
              "$ref": "#/$defs/_InputAxisMagnitudinal"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "input",
            "output"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "_TurboAction": {
      "markdownDescription": "Action that triggers on and off based on an interval instead of continuously.",
      "description": "Action that triggers on and off based on an interval instead of continuously.",
      "properties": {
        "action": {
          "$ref": "#/$defs/ControllerOnlyActionType"
        },
        "type": {
          "description": "Action that triggers on and off based on an interval instead of continuously.",
          "title": "Turbo Action",
          "type": "string",
          "const": "turbo",
          "markdownDescription": "Action that triggers on and off based on an interval instead of continuously."
        },
        "interval": {
          "$ref": "#/$defs/TurboActionInterval"
        }
      },
      "title": "Turbo Action",
      "additionalProperties": false,
      "required": [
        "type",
        "action",
        "interval"
      ],
      "type": "object"
    },
    "_ArcadeButtons": {
      "additionalProperties": false,
      "properties": {
        "mediumPunch": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Medium Punch Button"
        },
        "heavyKick": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Heavy Kick Button"
        },
        "heavyPunch": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Heavy Kick Button"
        },
        "lightKick": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Light Kick Button"
        },
        "specialKick": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Special Kick Button"
        },
        "specialPunch": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Special Punch Button"
        },
        "type": {
          "$ref": "#/$defs/_ControlTypeArcadeButtons"
        },
        "lightPunch": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Light Punch Button"
        },
        "mediumKick": {
          "$ref": "#/$defs/ArcadeButton",
          "title": "Medium Kick Button"
        }
      },
      "examples": [
        {
          "specialKick": {
            "action": [
              "gamepadA",
              "gamepadB"
            ]
          },
          "lightKick": {
            "action": "gamepadA"
          },
          "heavyPunch": {
            "action": "leftBumper"
          },
          "heavyKick": {
            "action": "gamepadX"
          },
          "mediumPunch": {
            "action": "rightBumper"
          },
          "specialPunch": {
            "action": [
              "gamepadX",
              "gamepadY"
            ]
          },
          "type": "arcadeButtons",
          "lightPunch": {
            "action": "gamepady"
          },
          "mediumKick": {
            "action": "gamepadB"
          }
        }
      ],
      "type": "object",
      "required": [
        "type",
        "lightKick",
        "mediumKick",
        "heavyKick",
        "lightPunch",
        "mediumPunch",
        "heavyPunch"
      ]
    },
    "Opacity": {
      "description": "This property changes how transparent the control component is. If omitted, a default value of 1 is used meaning the control is fully opaque.",
      "anyOf": [
        {
          "minimum": 0,
          "type": "number",
          "maximum": 1
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Opacity",
      "examples": [
        1,
        0.5,
        0,
        {
          "$ref": "#/definitions/buttonOpacity"
        }
      ],
      "markdownDescription": "This property changes how transparent the control component is. If omitted, a default value of 1 is used meaning the control is fully opaque."
    },
    "LayoutColors": {
      "description": "This property defines a collection of color palettes composed of color definitions that can be referenced elsewhere. For each style variant, a color palette may be defined. For any colors that are not defined in a specific variant, the `default` color palette or system's defaults will be used. A color definition can be specific to the layout's content or override the system's default colors. System colors are prefixed with the reserved `system_` keyword. Colors can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes.",
      "anyOf": [
        {
          "properties": {
            "default": {
              "$ref": "#/$defs/ColorPaletteDefaultVariant"
            },
            "highContrast": {
              "$ref": "#/$defs/ColorPaletteHighContrastVariant"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Colors",
      "examples": [
        {},
        {
          "default": {
            "myColor": "#ff0000ff",
            "system_contentPrimary": "#ffffffff"
          },
          "highContrast": {
            "myColor": "#00ff00ff",
            "system_contentPrimary": "#ffffffff"
          }
        },
        {
          "$ref": "#/definitions/myColors"
        }
      ],
      "markdownDescription": "This property defines a collection of color palettes composed of color definitions that can be referenced elsewhere. For each style variant, a color palette may be defined. For any colors that are not defined in a specific variant, the `default` color palette or system's defaults will be used. A color definition can be specific to the layout's content or override the system's default colors. System colors are prefixed with the reserved `system_` keyword. Colors can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes."
    },
    "_ControllerTriggerOutputType": {
      "description": "Outputs values that map to the specified gamepad trigger.",
      "enum": [
        "leftTrigger",
        "rightTrigger"
      ],
      "title": "Gamepad Analog Trigger Output",
      "type": "string",
      "markdownDescription": "Outputs values that map to the specified gamepad trigger."
    },
    "ButtonDefaultStyle": {
      "description": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "pullIndicator": {
              "$ref": "#/$defs/PullIndicator"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Default Style",
      "examples": [
        {},
        {
          "faceImage": {
            "type": "icon",
            "value": "interact"
          }
        },
        {
          "$ref": "#/definitions/commonButtonStyle"
        }
      ],
      "markdownDescription": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled."
    },
    "_ControlTypeDirectionalPad": {
      "description": "A directional pad control mimics the standard 4-way or 8-way control found on physical gamepads. This control is especially useful in 2D platformer and fighting games where precise directions are needed to perform certain actions. To choose between the 4-way or 8-way style control, refer to the `interaction` property.",
      "title": "Directional Pad Control Type",
      "type": "string",
      "const": "directionalPad",
      "markdownDescription": "A directional pad control mimics the standard 4-way or 8-way control found on physical gamepads. This control is especially useful in 2D platformer and fighting games where precise directions are needed to perform certain actions. To choose between the 4-way or 8-way style control, refer to the `interaction` property."
    },
    "_ControlTypeTouchpad": {
      "description": "A touchpad control that mimics a physical touchpad found on a laptop computer. This control is best used for mouse or joystick style movements, like camera control, and allows a player precise control through swipes and drags. In addition, an `action` can be assigned to the control and it can be rendered as a button with `renderAsButton` in order to create a control that combines movement or camera with a common action like aiming or jumping.",
      "title": "Touchpad Control Type",
      "type": "string",
      "const": "touchpad",
      "markdownDescription": "A touchpad control that mimics a physical touchpad found on a laptop computer. This control is best used for mouse or joystick style movements, like camera control, and allows a player precise control through swipes and drags. In addition, an `action` can be assigned to the control and it can be rendered as a button with `renderAsButton` in order to create a control that combines movement or camera with a common action like aiming or jumping."
    },
    "_InputMapping2D": {
      "$ref": "#/$defs/_InputMappingXY"
    },
    "DirectionalPadInteraction": {
      "description": "This property determines how the control can be interacted with by the player. See the `activationType` property for more information.",
      "anyOf": [
        {
          "properties": {
            "activationType": {
              "$ref": "#/$defs/DirectionalPadInteractionActivationType"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Interaction",
      "examples": [
        {
          "activationType": "exclusive"
        },
        {
          "activationType": "allowNeighboring"
        },
        {
          "$ref": "../../context.json#/definitions/commonDPadInteraction"
        }
      ],
      "markdownDescription": "This property determines how the control can be interacted with by the player. See the `activationType` property for more information."
    },
    "_ControllerAction": {
      "anyOf": [
        {
          "$ref": "#/$defs/_ControllerButtonOutputType"
        },
        {
          "$ref": "#/$defs/_ControllerAnalogMagnitudinalOutputType"
        }
      ]
    },
    "LayerControl": {
      "description": "An individual control in the current layer that a player can interact with to perform some translated action. Refer to the `type` property for information on the specific control types and their purpose. Layers add the special `blank` control type to hide any control from the layer(s) underneath this one.",
      "anyOf": [
        {
          "$ref": "#/$defs/_LayerControlBase"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Layer Control",
      "examples": [
        {
          "$ref": "#/definitions/commonLayerButtonControl"
        }
      ],
      "markdownDescription": "An individual control in the current layer that a player can interact with to perform some translated action. Refer to the `type` property for information on the specific control types and their purpose. Layers add the special `blank` control type to hide any control from the layer(s) underneath this one."
    },
    "AxisMapping3D": {
      "description": "This property defines the mapping or set of mappings from a player's three dimensional analog interactions with the control into either a one or two dimensional outputs. For three dimensional interactions, like with device sensors, the coordinate space is always relative to the game's video. In other words, it is such that the positive X direction is to the right of the video, the positive Y direction is to the top of the video and the positive Z direction is out of the video towards the player.",
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMapping3DTo2DOutput"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/_InputMapping2D"
          }
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Three Dimensional Axis Mapping",
      "examples": [
        {
          "sensitivity": 0.3,
          "output": "rightJoystick",
          "input": "axisXY"
        },
        {
          "input": "axisXY",
          "output": "relativeMouse"
        },
        [
          {
            "input": "axisUp",
            "output": "rightTrigger"
          },
          {
            "input": "axisDown",
            "output": "leftTrigger"
          }
        ],
        {
          "$ref": "#/definitions/commonAxisMapping"
        }
      ],
      "markdownDescription": "This property defines the mapping or set of mappings from a player's three dimensional analog interactions with the control into either a one or two dimensional outputs. For three dimensional interactions, like with device sensors, the coordinate space is always relative to the game's video. In other words, it is such that the positive X direction is to the right of the video, the positive Y direction is to the top of the video and the positive Z direction is out of the video towards the player."
    },
    "ActionType": {
      "description": "This property allows either a single action or an array of actions to be performed by the control when it is in the `activated` state. These actions can map to gamepad inputs or to more complex actions like showing a new layer on the layout.",
      "title": "Control Action",
      "$ref": "#/$defs/_ActionTypeBase",
      "markdownDescription": "This property allows either a single action or an array of actions to be performed by the control when it is in the `activated` state. These actions can map to gamepad inputs or to more complex actions like showing a new layer on the layout."
    },
    "InputCurveType": {
      "markdownDescription": "⚠️ Deprecated: This property may change behavior or be removed in future versions. This property defines which curve type to use. A type of `circular` can be used to map inputs with a circular curve matching the shape of the lower right quadrant of a circle. A value of `circular-inverse` can be used to map inputs with a circular curve matching the shape of the upper left quadrant of a circle.",
      "deprecated": true,
      "description": "⚠️ Deprecated: This property may change behavior or be removed in future versions. This property defines which curve type to use. A type of `circular` can be used to map inputs with a circular curve matching the shape of the lower right quadrant of a circle. A value of `circular-inverse` can be used to map inputs with a circular curve matching the shape of the upper left quadrant of a circle.",
      "title": "[DEPRECATED] Input Response Curve Type",
      "examples": [
        "circular",
        "circular-inverse",
        {
          "$ref": "#/definitions/commonJoystickResponseCurve"
        }
      ],
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "circular",
            "circular-inverse"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "_HexColor": {
      "type": "string",
      "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{8}|[a-fA-F0-9]{4}|[a-fA-F0-9]{3})$"
    },
    "_ColorPaletteColor": {
      "examples": [
        "#0099ff",
        "#0099ffaa",
        "#09f",
        "#09fa",
        {
          "$ref": "#/definitions/myColor"
        }
      ],
      "anyOf": [
        {
          "$ref": "#/$defs/_HexColor"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "BackgroundAssetValue": {
      "$ref": "#/$defs/AssetReference"
    },
    "TouchpadStyles": {
      "description": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state.",
      "anyOf": [
        {
          "properties": {
            "default": {
              "description": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled.",
              "title": "Control Default Style",
              "$ref": "#/$defs/TouchpadStyleBase",
              "markdownDescription": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled."
            },
            "idle": {
              "description": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting.",
              "title": "Control Idle Style",
              "$ref": "#/$defs/TouchpadStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting."
            },
            "disabled": {
              "description": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled.",
              "title": "Control Disabled Style",
              "$ref": "#/$defs/TouchpadStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled."
            },
            "activated": {
              "description": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed.",
              "title": "Control Activated Style",
              "$ref": "#/$defs/TouchpadStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed."
            },
            "moving": {
              "description": "Styling overrides used when the control is in the `moving` state. The `moving` state is when the control is being interacted with but its action is not being executed yet. Additional styling elements may be available in this state to indicate the direction of the interaction.",
              "title": "Control Moving Style",
              "$ref": "#/$defs/TouchpadStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `moving` state. The `moving` state is when the control is being interacted with but its action is not being executed yet. Additional styling elements may be available in this state to indicate the direction of the interaction."
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Styles",
      "examples": [
        {
          "default": {
            "faceImage": {
              "type": "icon",
              "value": "look"
            }
          }
        },
        {
          "$ref": "#/definitions/commonTouchpadControlStyles"
        }
      ],
      "markdownDescription": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state."
    },
    "ButtonIdleStyle": {
      "description": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is the neutral or resting state of the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a fully transparent background and pull indicator to show the control is idle and not being interacted with.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Idle Style",
      "examples": [
        {},
        {
          "faceImage": {
            "type": "icon",
            "value": "interact"
          }
        },
        {
          "$ref": "#/definitions/commonButtonStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is the neutral or resting state of the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a fully transparent background and pull indicator to show the control is idle and not being interacted with."
    },
    "_InputMappingXY": {
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMappingXYToGamepad2DOutput"
        },
        {
          "$ref": "#/$defs/_InputMappingXYToMouse2DOutput"
        }
      ]
    },
    "_ColorPaletteBase": {
      "additionalProperties": false,
      "properties": {
        "system_actionColorY": {
          "$ref": "#/$defs/_SystemColorGamepadActionColor"
        },
        "system_accentPrimary": {
          "$ref": "#/$defs/_SystemColorAccentPrimary"
        },
        "system_contrastSecondary": {
          "$ref": "#/$defs/_SystemColorContrastSecondary"
        },
        "system_contrastPrimary": {
          "$ref": "#/$defs/_SystemColorContrastPrimary"
        },
        "system_actionColorA": {
          "$ref": "#/$defs/_SystemColorGamepadActionColor"
        },
        "system_accentSecondary": {
          "$ref": "#/$defs/_SystemColorAccentSecondary"
        },
        "system_contentPrimary": {
          "$ref": "#/$defs/_SystemColorContentPrimary"
        },
        "system_contentSecondary": {
          "$ref": "#/$defs/_SystemColorContentSecondary"
        },
        "system_actionColorDefault": {
          "$ref": "#/$defs/_SystemColorActionColor"
        },
        "system_actionColorX": {
          "$ref": "#/$defs/_SystemColorGamepadActionColor"
        },
        "system_actionColorB": {
          "$ref": "#/$defs/_SystemColorGamepadActionColor"
        }
      },
      "examples": [
        {},
        {
          "myColor": "#ff00ffff",
          "system_contentPrimary": "#ffffffff"
        }
      ],
      "type": "object",
      "patternProperties": {
        "^(?!system_)[a-zA-Z0-9\\.\\-_]+$": {
          "$ref": "#/$defs/_CustomColorPaletteColor"
        }
      }
    },
    "Control": {
      "description": "An individual control that a player can interact with to perform some translated action. Refer to the `type` property for information on the specific control types and their purpose.",
      "anyOf": [
        {
          "$ref": "#/$defs/_ControlBase"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Control",
      "examples": [
        {
          "$ref": "#/definitions/commonButtonControl"
        }
      ],
      "markdownDescription": "An individual control that a player can interact with to perform some translated action. Refer to the `type` property for information on the specific control types and their purpose."
    },
    "_ControllerButtonOutputType": {
      "description": "Outputs a gamepad button press.",
      "enum": [
        "guide",
        "gamepadA",
        "gamepadB",
        "gamepadX",
        "gamepadY",
        "view",
        "menu",
        "leftBumper",
        "rightBumper",
        "dPadLeft",
        "dPadRight",
        "dPadUp",
        "dPadDown",
        "leftThumb",
        "rightThumb"
      ],
      "title": "Gamepad Button Output",
      "type": "string",
      "markdownDescription": "Outputs a gamepad button press."
    },
    "ButtonToggledStyle": {
      "description": "Styling overrides used when the control is in the `toggled` state. The `toggled` state is when the control is not being interacted with but its action is being executed since it is currently toggled.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Toggled Style",
      "examples": [
        {},
        {
          "faceImage": {
            "type": "icon",
            "value": "interact"
          }
        },
        {
          "$ref": "#/definitions/commonButtonStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `toggled` state. The `toggled` state is when the control is not being interacted with but its action is being executed since it is currently toggled."
    },
    "_RelativeMouse2DOutputType": {
      "description": "This output type takes two dimensional control inputs and translates them to relative mouse movements.",
      "title": "Relative Mouse Two Dimensional Output",
      "type": "string",
      "const": "relativeMouse",
      "markdownDescription": "This output type takes two dimensional control inputs and translates them to relative mouse movements."
    },
    "_ControlTypeArcadeButtons": {
      "description": "An arcade buttons control. This control is a group of buttons arranged based on common 6 or 8 button arcade cabinet arrangements. This is commonly used with fighting style games. Touching between buttons allows the player to press multiple buttons at once. Touching above or below a row of buttons will activate all buttons in that row simultaneously, making it easier to perform combos.",
      "title": "Arcade Buttons Control Type",
      "type": "string",
      "const": "arcadeButtons",
      "markdownDescription": "An arcade buttons control. This control is a group of buttons arranged based on common 6 or 8 button arcade cabinet arrangements. This is commonly used with fighting style games. Touching between buttons allows the player to press multiple buttons at once. Touching above or below a row of buttons will activate all buttons in that row simultaneously, making it easier to perform combos."
    },
    "LayoutControlWheel": {
      "description": "A set of controls organized in a circle or wheel shape. These wheel controls are by default placed under the player's thumbs on either the right or left of the screen based on if the `right` or `left` property is used in the layout content. The wheel is made up of an inner group of controls as well as an outer ring of controls.",
      "anyOf": [
        {
          "properties": {
            "outer": {
              "$ref": "#/$defs/OuterLayoutControlWheel"
            },
            "inner": {
              "$ref": "#/$defs/InnerLayoutControlWheel"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Control Wheel",
      "examples": [
        {},
        {
          "outer": [
            null,
            [
              {
                "type": "button",
                "action": "gamepadX"
              }
            ],
            {
              "type": "button",
              "action": "gamepadY"
            }
          ],
          "inner": [
            {
              "type": "joystick",
              "axis": {
                "input": "axisXY",
                "output": "leftJoystick"
              }
            }
          ]
        },
        {
          "$ref": "#/definitions/commonControlWheel"
        }
      ],
      "markdownDescription": "A set of controls organized in a circle or wheel shape. These wheel controls are by default placed under the player's thumbs on either the right or left of the screen based on if the `right` or `left` property is used in the layout content. The wheel is made up of an inner group of controls as well as an outer ring of controls."
    },
    "Reference": {
      "additionalProperties": false,
      "properties": {
        "$ref": {
          "description": "Reference to a value defined locally or in a nearby file like the context file. See the `definitions` layout property for more information.",
          "exmaples": [
            "#/definitions/layoutReusableItem",
            "../../context.json#/state/dynamicStateValue",
            "../../context.json#/definitions/globalReusableItem"
          ],
          "type": "string",
          "format": "uri-reference",
          "markdownDescription": "Reference to a value defined locally or in a nearby file like the context file. See the `definitions` layout property for more information."
        }
      },
      "type": "object",
      "required": [
        "$ref"
      ]
    },
    "LayerUpperRightContent": {
      "description": "This property defines layer content that is fixed to the upper right corner of the available display space. This property mirrors the main layout's upper right area except that it allows the `blank` control type to be used to hide controls from the layer(s) underneath this one.",
      "anyOf": [
        {
          "minItems": 1,
          "maxItems": 5,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/LayerControl"
              },
              {
                "$ref": "#/$defs/_Null"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Upper Layer Right Content",
      "examples": [
        [
          {
            "type": "blank"
          },
          {
            "type": "button",
            "action": "view"
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonUpperRightLayerControls"
        }
      ],
      "markdownDescription": "This property defines layer content that is fixed to the upper right corner of the available display space. This property mirrors the main layout's upper right area except that it allows the `blank` control type to be used to hide controls from the layer(s) underneath this one."
    },
    "LayoutStyles": {
      "description": "This property defines reusable styles which can be referenced throughout the layout for styling purposes. If an equivalent `styles` property is defined in the context file, the contents of each will be merged. If a duplicate definition is found, the definition in the layout is preferred, overwriting the definition in the context file.",
      "title": "Layout Styles",
      "$ref": "#/$defs/_LayoutStyles",
      "markdownDescription": "This property defines reusable styles which can be referenced throughout the layout for styling purposes. If an equivalent `styles` property is defined in the context file, the contents of each will be merged. If a duplicate definition is found, the definition in the layout is preferred, overwriting the definition in the context file."
    },
    "OuterWheelControlGroup": {
      "anyOf": [
        {
          "$ref": "#/$defs/Control"
        },
        {
          "$ref": "#/$defs/ControlGroup"
        },
        {
          "$ref": "#/$defs/_Null"
        }
      ]
    },
    "ButtonStyles": {
      "description": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state.",
      "anyOf": [
        {
          "properties": {
            "toggled": {
              "$ref": "#/$defs/ButtonToggledStyle"
            },
            "idle": {
              "$ref": "#/$defs/ButtonIdleStyle"
            },
            "disabled": {
              "$ref": "#/$defs/ButtonDisabledStyle"
            },
            "pulled": {
              "$ref": "#/$defs/ButtonPulledStyle"
            },
            "default": {
              "$ref": "#/$defs/ButtonDefaultStyle"
            },
            "activated": {
              "$ref": "#/$defs/ButtonActivatedStyle"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Styles",
      "examples": [
        {},
        {
          "default": {
            "faceImage": {
              "type": "icon",
              "value": "interact"
            }
          }
        },
        {
          "$ref": "#/definitions/commonButtonStyles"
        }
      ],
      "markdownDescription": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state."
    },
    "JoystickMovingStyle": {
      "description": "Styling overrides used when the control is in the `moving` state. The `moving` state is when the control is being interacted with but its action is not being executed yet. Additional styling elements may be available in this state to indicate the direction of the interaction.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "outline": {
              "$ref": "#/$defs/JoystickOutlineWithIndicator"
            },
            "knob": {
              "$ref": "#/$defs/Knob"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Moving Style",
      "examples": [
        {},
        {
          "knob": {
            "background": {
              "type": "asset",
              "value": "CustomKnobBackgroundImage"
            },
            "stroke": {
              "type": "solid",
              "color": "#0099ffaa"
            },
            "faceImage": {
              "type": "asset",
              "value": "CustomKnobFaceImage"
            }
          },
          "background": {
            "type": "asset",
            "value": "CustomJoystickBackgroundImage"
          }
        },
        {
          "$ref": "#/definitions/commonJoystickStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `moving` state. The `moving` state is when the control is being interacted with but its action is not being executed yet. Additional styling elements may be available in this state to indicate the direction of the interaction."
    },
    "LayoutActionTarget": {
      "description": "This property specifies what layer to apply when the action is executed. This name must appear in the `layers` property of the layout content.",
      "anyOf": [
        {
          "type": "string",
          "pattern": "^(?!__proto__)[a-zA-Z0-9\\.\\-_]+$"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Layout Action Target",
      "examples": [
        "WeaponSelectLayer",
        "AdvancedDrivingLayer",
        {
          "$ref": "../../context.json#/state/playerAdvancedDrivingControlsPreference"
        }
      ],
      "markdownDescription": "This property specifies what layer to apply when the action is executed. This name must appear in the `layers` property of the layout content."
    },
    "DirectionalPadStyles": {
      "description": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state.",
      "anyOf": [
        {
          "properties": {
            "default": {
              "description": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled.",
              "title": "Control Default Style",
              "$ref": "#/$defs/DirectionalPadDefaultStyle",
              "markdownDescription": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled."
            },
            "idle": {
              "description": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is the neutral or resting state of the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a fully transparent gradient to show the control is idle and not being interacted with.",
              "title": "Control Idle Style",
              "$ref": "#/$defs/DirectionalPadIdleStyle",
              "markdownDescription": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is the neutral or resting state of the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a fully transparent gradient to show the control is idle and not being interacted with."
            },
            "disabled": {
              "description": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed.",
              "title": "Control Activated Style",
              "$ref": "#/$defs/DirectionalPadIdleStyle",
              "markdownDescription": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed."
            },
            "activated": {
              "description": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed.",
              "title": "Control Activated Style",
              "$ref": "#/$defs/DirectionalPadDefaultStyle",
              "markdownDescription": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed."
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Styles",
      "examples": [
        {},
        {
          "default": {
            "gradient": {
              "color": "#0099ffaa"
            },
            "stroke": {
              "color": "#0099ff",
              "type": "solid",
              "opacity": 1
            }
          }
        },
        {
          "$ref": "#/definitions/commonDPadStyles"
        }
      ],
      "markdownDescription": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state."
    },
    "OuterWheelLayerControlGroup": {
      "anyOf": [
        {
          "$ref": "#/$defs/LayerControl"
        },
        {
          "$ref": "#/$defs/LayerControlGroup"
        },
        {
          "$ref": "#/$defs/_Null"
        }
      ]
    },
    "AssetReference": {
      "description": "An asset reference is an identifier for a custom asset bundled with the touch layouts. To refer to an entire file, use the file name of the image without the file extension. For a sprite sheet asset, use the texture file name without the extension followed by a `/` and the sprite name within the sprite atlas. Note that in order to handle devices with different screen resolutions, it is expected that files for each DPI (1.0x, 1.5x, 2.0x, 3.0x, 4.0x) are provided. Depending on which control and component the asset is being used for, the maximum 1.0x resolution may be different though 60x60 and 120x120 are the most common allowed maximums. All other DPI resolutions should be a multiple of the 1.0x asset's resolution.",
      "anyOf": [
        {
          "type": "string",
          "pattern": "^[^/\\.]+$"
        },
        {
          "type": "string",
          "pattern": "^[^/\\.]+/[A-Za-z0-9_]+$"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Asset Reference Styling Component",
      "examples": [
        "JumpImage",
        "SpitesheetTextureFileName/Jump",
        {
          "$ref": "#/definitions/buttonBackgroundAssetValue"
        }
      ],
      "markdownDescription": "An asset reference is an identifier for a custom asset bundled with the touch layouts. To refer to an entire file, use the file name of the image without the file extension. For a sprite sheet asset, use the texture file name without the extension followed by a `/` and the sprite name within the sprite atlas. Note that in order to handle devices with different screen resolutions, it is expected that files for each DPI (1.0x, 1.5x, 2.0x, 3.0x, 4.0x) are provided. Depending on which control and component the asset is being used for, the maximum 1.0x resolution may be different though 60x60 and 120x120 are the most common allowed maximums. All other DPI resolutions should be a multiple of the 1.0x asset's resolution."
    },
    "_ControlBase": {
      "anyOf": [
        {
          "$ref": "#/$defs/_Button"
        },
        {
          "$ref": "#/$defs/_Joystick"
        },
        {
          "$ref": "#/$defs/_DirectionalPad"
        },
        {
          "$ref": "#/$defs/_Touchpad"
        },
        {
          "$ref": "#/$defs/_Throttle"
        },
        {
          "$ref": "#/$defs/_ArcadeButtons"
        }
      ],
      "properties": {
        "type": {
          "anyOf": [
            {
              "$ref": "#/$defs/_ControlTypeArcadeButtons"
            },
            {
              "$ref": "#/$defs/_ControlTypeButton"
            },
            {
              "$ref": "#/$defs/_ControlTypeDirectionalPad"
            },
            {
              "$ref": "#/$defs/_ControlTypeJoystick"
            },
            {
              "$ref": "#/$defs/_ControlTypeThrottle"
            },
            {
              "$ref": "#/$defs/_ControlTypeTouchpad"
            }
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "_ControlTypeThrottle": {
      "description": "A throttle control that mimics a physical throttle in a boat, car, or airplane. This control has a knob that a player can interact with to move the throttle either up or down. This control is most useful for driving or flying games where the gas often needs to be held down at all times. When styling the control, separate `activatedUp`, `activatedDown`, and `idleUp` states allow precise customization to show when a player is using gas, brakes, etc.",
      "title": "Throttle Control Type",
      "type": "string",
      "const": "throttle",
      "markdownDescription": "A throttle control that mimics a physical throttle in a boat, car, or airplane. This control has a knob that a player can interact with to move the throttle either up or down. This control is most useful for driving or flying games where the gas often needs to be held down at all times. When styling the control, separate `activatedUp`, `activatedDown`, and `idleUp` states allow precise customization to show when a player is using gas, brakes, etc."
    },
    "_Null": {
      "description": "This is a special value that can be used in place of a control to skip a location. This is useful especially in arrays of controls and on layers to pad out the placement of content.",
      "title": "Null",
      "examples": [
        null
      ],
      "type": "null",
      "markdownDescription": "This is a special value that can be used in place of a control to skip a location. This is useful especially in arrays of controls and on layers to pad out the placement of content."
    },
    "_SystemColorAccentPrimary": {
      "description": "This property overrides the accent primary system color used for styling components such as the ergo-edit inner wheel.",
      "title": "Accent Primary System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the accent primary system color used for styling components such as the ergo-edit inner wheel."
    },
    "_InputMappingZYToGamepad2DOutput": {
      "properties": {
        "sensitivity": {
          "$ref": "#/$defs/Sensitivity"
        },
        "output": {
          "$ref": "#/$defs/_ControllerAnalog2DOutputType"
        },
        "input": {
          "$ref": "#/$defs/_InputAxisZY"
        },
        "deadzone": {
          "$ref": "#/$defs/Deadzone2D"
        },
        "responseCurve": {
          "$ref": "#/$defs/InputCurve"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "output"
      ]
    },
    "ArcadeButtonStyleBase": {
      "examples": [
        {
          "faceImage": {
            "type": "asset",
            "value": "CustomArcadeButtonFaceImage"
          },
          "background": {
            "type": "asset",
            "value": "CustomArcadeButtonBackgroundImage"
          }
        },
        {
          "$ref": "#/definitions/commonArcadeButtonStyle"
        }
      ],
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "Deadzone2D": {
      "description": "The normalized, minimum output value produced by the control. This is useful to counteract a deadzone programmed into the game. If `radial` is set to true, the deadzone is calculated one dimensionally along the radial component. Otherwise, each axis is computed individually using the threshold value. If omitted, no deadzone is used.",
      "anyOf": [
        {
          "properties": {
            "threshold": {
              "$ref": "#/$defs/DeadzoneThreshold"
            },
            "radial": {
              "$ref": "#/$defs/DeadzoneRadial"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "threshold",
            "radial"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Two Dimensional Deadzone",
      "examples": [
        {
          "threshold": 0,
          "radial": true
        },
        {
          "threshold": 0.1,
          "radial": false
        },
        {
          "$ref": "#/definitions/commonDeadzone"
        }
      ],
      "markdownDescription": "The normalized, minimum output value produced by the control. This is useful to counteract a deadzone programmed into the game. If `radial` is set to true, the deadzone is calculated one dimensionally along the radial component. Otherwise, each axis is computed individually using the threshold value. If omitted, no deadzone is used."
    },
    "DirectionalPadIdleStyle": {
      "examples": [
        {},
        {
          "gradient": {
            "color": "#0099ffaa"
          },
          "stroke": {
            "color": "#0099ff",
            "type": "solid",
            "opacity": 1
          }
        },
        {
          "$ref": "#/definitions/commonDPadStyle"
        }
      ],
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "fill": {
              "$ref": "#/$defs/FillColor"
            },
            "stroke": {
              "$ref": "#/$defs/Stroke"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "_ControllerAnalogMagnitudinalOutputType": {
      "anyOf": [
        {
          "$ref": "#/$defs/_ControllerTriggerOutputType"
        },
        {
          "$ref": "#/$defs/_ControllerAnalogMagnitudinalJoystickOutputType"
        }
      ]
    },
    "AxisMapping2D": {
      "description": "This property defines the mapping or set of mappings from a player's two dimensional analog interactions with the control into either one or two dimensions outputs. Note that based on the axis assignments, the look and feel of the control may change.",
      "anyOf": [
        {
          "$ref": "#/$defs/_AxisMapping2DItem"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/$defs/_AxisMapping2DItem"
          }
        }
      ],
      "title": "Two Dimensional Axis Mapping",
      "examples": [
        {
          "sensitivity": 0.3,
          "output": "rightJoystick",
          "input": "axisXY"
        },
        {
          "input": "axisXY",
          "output": "relativeMouse"
        },
        [
          {
            "input": "axisUp",
            "output": "rightTrigger"
          },
          {
            "input": "axisDown",
            "output": "leftTrigger"
          }
        ],
        {
          "$ref": "#/definitions/commonAxisMapping"
        }
      ],
      "markdownDescription": "This property defines the mapping or set of mappings from a player's two dimensional analog interactions with the control into either one or two dimensions outputs. Note that based on the axis assignments, the look and feel of the control may change."
    },
    "_SingleControlActionAssignableTypes": {
      "anyOf": [
        {
          "$ref": "#/$defs/_ControllerAction"
        },
        {
          "$ref": "#/$defs/_LayoutAction"
        },
        {
          "$ref": "#/$defs/_TurboAction"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "_LayerControlBase": {
      "anyOf": [
        {
          "$ref": "#/$defs/_ControlBase"
        },
        {
          "$ref": "#/$defs/_Blank"
        }
      ]
    },
    "OuterLayerControlWheel": {
      "description": "Defines the outer ring of layer controls and layer control groups on the wheel. This property behaves identically to the same named layout property except that it additionally allows the `blank` control in order to hide controls from the layer(s) underneath it. Note that if a control or control group from a layer below has a different number of items than this layer's corresponding index, all items from that layer will be hidden. Just like on the base layout wheel, a `null` can be used to skip over a control or control group.",
      "anyOf": [
        {
          "maxItems": 8,
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/OuterWheelLayerControlGroup"
          },
          "type": "array"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Outer",
      "examples": [
        [],
        [
          {
            "type": "blank"
          },
          [
            null,
            {
              "type": "blank"
            },
            null
          ],
          {
            "type": "button",
            "action": "gamepadX"
          }
        ],
        {
          "$ref": "#/definitions/commonLayerOuterWheel"
        }
      ],
      "markdownDescription": "Defines the outer ring of layer controls and layer control groups on the wheel. This property behaves identically to the same named layout property except that it additionally allows the `blank` control in order to hide controls from the layer(s) underneath it. Note that if a control or control group from a layer below has a different number of items than this layer's corresponding index, all items from that layer will be hidden. Just like on the base layout wheel, a `null` can be used to skip over a control or control group."
    },
    "FillColor": {
      "description": "This property changes the color with which to fill in the control component. If omitted, a mostly transparent white fill is used. Colors must be specified as a hexadecimal value following the `hex-color` CSS specification or by referencing a known system color or layout color by using a string starting with `colors/` followed by the name of the color. See https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color for more information.",
      "title": "Fill",
      "$ref": "#/$defs/_Color",
      "markdownDescription": "This property changes the color with which to fill in the control component. If omitted, a mostly transparent white fill is used. Colors must be specified as a hexadecimal value following the `hex-color` CSS specification or by referencing a known system color or layout color by using a string starting with `colors/` followed by the name of the color. See https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color for more information."
    },
    "_InputMapping3DTo2DOutput": {
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMappingXY"
        },
        {
          "$ref": "#/$defs/_InputMappingZY"
        }
      ]
    },
    "_InputAxisMagnitudinal": {
      "description": "Uses only the magnitude of the input along the specified axis direction (up, down, left or right) to translate to the specified output. For instance, a value of `axisLeft` will be mapped from 0 to 1 according to how far left from the control origin the input currently is. Since this a magnitude based value, no negative outputs are possible.",
      "enum": [
        "axisRight",
        "axisLeft",
        "axisUp",
        "axisDown"
      ],
      "title": "Axis Magnitudinal Input Mapping",
      "type": "string",
      "markdownDescription": "Uses only the magnitude of the input along the specified axis direction (up, down, left or right) to translate to the specified output. For instance, a value of `axisLeft` will be mapped from 0 to 1 according to how far left from the control origin the input currently is. Since this a magnitude based value, no negative outputs are possible."
    },
    "_LayoutStyles": {
      "examples": [
        {},
        {
          "colors": {
            "default": {
              "myColor": "#ff0000ff",
              "system_contentPrimary": "#ffffffff"
            },
            "highContrast": {
              "myColor": "#00ff00ff",
              "system_contentPrimary": "#ffffffff"
            }
          }
        },
        {
          "$ref": "../../context.json#/definitions/commonStyles"
        }
      ],
      "anyOf": [
        {
          "properties": {
            "colors": {
              "$ref": "#/$defs/LayoutColors"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "ActionThreshold": {
      "description": "This property defines the radial, normalized input value required to trigger the control's action. When this value is reached, the control will execute its action and transition from the `moving` state to the `activated` state. If omitted, a default value of 0 is used meaning that any control interaction will immediately execute the assigned action.",
      "anyOf": [
        {
          "type": "number",
          "minimum": 0
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Action Threshold",
      "examples": [
        1,
        1.5,
        0,
        {
          "$ref": "../../context.json#/state/playerJoystickActionDeadzonePreference"
        }
      ],
      "markdownDescription": "This property defines the radial, normalized input value required to trigger the control's action. When this value is reached, the control will execute its action and transition from the `moving` state to the `activated` state. If omitted, a default value of 0 is used meaning that any control interaction will immediately execute the assigned action."
    },
    "ControlVisibility": {
      "description": "Determines if the control is shown or not. This property is most useful when used with context file `state` to allow controls to be dynamically shown and hidden based on game state. If omitted, a default value of `true` is used. When not visible, a control cannot be activated and does not execute any actions even if a player is touching where the control would otherwise be shown.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Visible",
      "examples": [
        true,
        false,
        {
          "$ref": "../../context.json#/state/hasSpellEquipped"
        }
      ],
      "markdownDescription": "Determines if the control is shown or not. This property is most useful when used with context file `state` to allow controls to be dynamically shown and hidden based on game state. If omitted, a default value of `true` is used. When not visible, a control cannot be activated and does not execute any actions even if a player is touching where the control would otherwise be shown."
    },
    "_BackgroundAsset": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "A custom asset used to style the background.",
          "type": "string",
          "const": "asset",
          "markdownDescription": "A custom asset used to style the background."
        },
        "opacity": {
          "$ref": "#/$defs/Opacity"
        },
        "value": {
          "$ref": "#/$defs/BackgroundAssetValue"
        }
      },
      "examples": [
        {
          "type": "asset",
          "value": "CustomImageFileName"
        }
      ],
      "type": "object",
      "required": [
        "type",
        "value"
      ]
    },
    "Gradient": {
      "description": "A gradient is a blend from one color to another. Currently, the only gradients allowed are from fully transparent to the supplied color value.",
      "anyOf": [
        {
          "properties": {
            "color": {
              "$ref": "#/$defs/Color"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Gradient",
      "examples": [
        {
          "color": "#0099ffaa"
        },
        {
          "color": {
            "$ref": "#/definitions/commonColor"
          }
        },
        {
          "$ref": "#/definitions/commonColorGradient"
        }
      ],
      "markdownDescription": "A gradient is a blend from one color to another. Currently, the only gradients allowed are from fully transparent to the supplied color value."
    },
    "InputCurve": {
      "markdownDescription": "⚠️ Deprecated: This property may change behavior or be removed in future versions. This property defines the curve or function of how inputs are mapped to output values. A type of `circular` or `circular-inverse` can be used to map inputs with a circular curve matching the shape of the lower right quadrant or upper left quadrant respectively. If this property is omitted, a default linear mapping is used.",
      "deprecated": true,
      "description": "⚠️ Deprecated: This property may change behavior or be removed in future versions. This property defines the curve or function of how inputs are mapped to output values. A type of `circular` or `circular-inverse` can be used to map inputs with a circular curve matching the shape of the lower right quadrant or upper left quadrant respectively. If this property is omitted, a default linear mapping is used.",
      "title": "[DEPRECATED] Input Response Curve",
      "examples": [
        {
          "type": "circular",
          "range": [
            0,
            0.33
          ]
        },
        {
          "type": "circular-inverse",
          "range": [
            0,
            1
          ]
        },
        {
          "$ref": "#/$defs/commonJoystickResponseCurve"
        }
      ],
      "anyOf": [
        {
          "properties": {
            "type": {
              "$ref": "#/$defs/InputCurveType"
            },
            "range": {
              "$ref": "#/$defs/InputCurveRange"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "range",
            "type"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "LayerLowerContent": {
      "description": "This property defines the content of the layer that is fixed to the bottom edge of the available display space. This property operates identically to the same named property of the layout content except that this property additionally allows the `blank` control to be used to hide controls from the layer(s) underneath this one.",
      "anyOf": [
        {
          "properties": {
            "center": {
              "$ref": "#/$defs/LayerControl"
            },
            "leftCenter": {
              "$ref": "#/$defs/LayerLowerArrayContent"
            },
            "rightCenter": {
              "$ref": "#/$defs/LayerLowerArrayContent"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Lower Layer Content",
      "examples": [
        {
          "center": {
            "type": "blank"
          }
        },
        {
          "leftCenter": [
            {
              "type": "blank"
            }
          ],
          "rightCenter": [
            {
              "type": "blank"
            }
          ]
        },
        {
          "$ref": "../../context.json#/definitions/commonLayerLowerContent"
        }
      ],
      "markdownDescription": "This property defines the content of the layer that is fixed to the bottom edge of the available display space. This property operates identically to the same named property of the layout content except that this property additionally allows the `blank` control to be used to hide controls from the layer(s) underneath this one."
    },
    "_InputAxis1D": {
      "anyOf": [
        {
          "description": "Uses interactions along the X axis of the control, positive in the positive and negative direction, to translate to the specified output. See the `output` property for more information on this mapping.",
          "title": "X Axis Input Mapping",
          "type": "string",
          "const": "axisX",
          "markdownDescription": "Uses interactions along the X axis of the control, positive in the positive and negative direction, to translate to the specified output. See the `output` property for more information on this mapping."
        },
        {
          "description": "Uses interactions along the Y axis of the control, positive in the positive and negative direction, to translate to the specified output. See the `output` property for more information on this mapping.",
          "title": "Y Axis Input Mapping",
          "type": "string",
          "const": "axisY",
          "markdownDescription": "Uses interactions along the Y axis of the control, positive in the positive and negative direction, to translate to the specified output. See the `output` property for more information on this mapping."
        }
      ]
    },
    "Toggle": {
      "description": "This property changes the control to be a toggle control. Instead of returning to `idle` state when no longer being interacted with, the control instead transitions to the `toggled` state where its action is still executed. After the player interacts with the control again, it will un-toggle and return to `idle` state.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Toggle",
      "examples": [
        true,
        false,
        {
          "$ref": "../../context.json#/state/playerToggleCrouchPreference"
        }
      ],
      "markdownDescription": "This property changes the control to be a toggle control. Instead of returning to `idle` state when no longer being interacted with, the control instead transitions to the `toggled` state where its action is still executed. After the player interacts with the control again, it will un-toggle and return to `idle` state."
    },
    "_Joystick": {
      "additionalProperties": false,
      "properties": {
        "action": {
          "$ref": "#/$defs/ActionType"
        },
        "relative": {
          "$ref": "#/$defs/RelativeInteraction"
        },
        "type": {
          "$ref": "#/$defs/_ControlTypeJoystick"
        },
        "visible": {
          "$ref": "#/$defs/ControlVisibility"
        },
        "expand": {
          "$ref": "#/$defs/ExpandInteraction"
        },
        "axis": {
          "$ref": "#/$defs/AxisMapping2D"
        },
        "styles": {
          "$ref": "#/$defs/JoystickStyles"
        },
        "actionThreshold": {
          "$ref": "#/$defs/ActionThreshold"
        },
        "enabled": {
          "$ref": "#/$defs/ControlEnabled"
        }
      },
      "examples": [
        {
          "axis": {
            "input": "axisXY",
            "output": "leftJoystick"
          },
          "type": "joystick",
          "styles": {
            "default": {
              "knob": {
                "faceImage": {
                  "type": "icon",
                  "value": "walk"
                }
              }
            }
          }
        }
      ],
      "type": "object",
      "required": [
        "type",
        "axis"
      ]
    },
    "JoystickActivatedStyle": {
      "description": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "outline": {
              "$ref": "#/$defs/JoystickOutlineWithIndicator"
            },
            "knob": {
              "$ref": "#/$defs/Knob"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Activated Style",
      "examples": [
        {},
        {
          "knob": {
            "background": {
              "type": "asset",
              "value": "CustomKnobBackgroundImage"
            },
            "stroke": {
              "type": "solid",
              "color": "#0099ffaa"
            },
            "faceImage": {
              "type": "asset",
              "value": "CustomKnobFaceImage"
            }
          },
          "background": {
            "type": "asset",
            "value": "CustomJoystickBackgroundImage"
          }
        },
        {
          "$ref": "#/definitions/commonJoystickStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed."
    },
    "TouchpadStyleBase": {
      "examples": [
        {
          "faceImage": {
            "type": "icon",
            "value": "look"
          }
        },
        {
          "$ref": "#/definitions/commonTouchpadStyling"
        }
      ],
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "_RelativeMouseMagnitudinalOutputType": {
      "description": "This output type takes the magnitude of a control input along a specified input axis and maps it to relative mouse movements in a single direction. For instance, if a joystick's X axis movement was mapped to relative mouse X axis output, a series of positive X direction mouse movements will be sent as long as the joystick is held to the right.",
      "enum": [
        "relativeMouseUp",
        "relativeMouseDown",
        "relativeMouseLeft",
        "relativeMouseRight"
      ],
      "title": "Relative Mouse Directional Directional Output",
      "type": "string",
      "markdownDescription": "This output type takes the magnitude of a control input along a specified input axis and maps it to relative mouse movements in a single direction. For instance, if a joystick's X axis movement was mapped to relative mouse X axis output, a series of positive X direction mouse movements will be sent as long as the joystick is held to the right."
    },
    "JoystickOutlineWithIndicator": {
      "description": "The visual styling for the outline of the control with an indicator for the direction of the interaction. This property in other states may not include the ability to style the indicator as the control is not being interacted with in those states.",
      "anyOf": [
        {
          "properties": {
            "indicator": {
              "$ref": "#/$defs/JoystickDirectionIndicator"
            },
            "stroke": {
              "$ref": "#/$defs/Stroke"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Outline Styling Component",
      "examples": [
        {
          "indicator": {
            "type": "color",
            "value": "#0099ffaa"
          },
          "stroke": {
            "type": "solid",
            "color": "#0099ffaa"
          }
        },
        {
          "$ref": "#/definitions/commonOutlineStyling"
        }
      ],
      "markdownDescription": "The visual styling for the outline of the control with an indicator for the direction of the interaction. This property in other states may not include the ability to style the indicator as the control is not being interacted with in those states."
    },
    "_ControlTypeJoystick": {
      "description": "A joystick control that mimics an analog joystick from a physical controller. It allows the player to move the control in either two dimensional or one dimensional space based on the `axis` property. In addition, it allows simultaneous actions to be performed along with the movement by using the `action` and `actionThreshold` properties. This control is often used for player locomotion or camera control, and it is common for touch layouts to include several joysticks for any actions that can be performed while moving or looking around like aiming or shooting.",
      "title": "Joystick Control Type",
      "type": "string",
      "const": "joystick",
      "markdownDescription": "A joystick control that mimics an analog joystick from a physical controller. It allows the player to move the control in either two dimensional or one dimensional space based on the `axis` property. In addition, it allows simultaneous actions to be performed along with the movement by using the `action` and `actionThreshold` properties. This control is often used for player locomotion or camera control, and it is common for touch layouts to include several joysticks for any actions that can be performed while moving or looking around like aiming or shooting."
    },
    "ColorPaletteDefaultVariant": {
      "description": "This property defines a collection of reusable colors that can be referenced elsewhere. A color definition can be specific to the layout's content or override the system's default colors. System colors are prefixed with the reserved `system_` keyword. For any colors that are not defined in a specific variant or no specific variant is active, the corresponding color references will fallback to the colors defined here. If a given system color override is not specified, the color reference will fallback to the system's default colors. Colors can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes.",
      "title": "Default Colors",
      "$ref": "#/$defs/_ColorPaletteBase",
      "markdownDescription": "This property defines a collection of reusable colors that can be referenced elsewhere. A color definition can be specific to the layout's content or override the system's default colors. System colors are prefixed with the reserved `system_` keyword. For any colors that are not defined in a specific variant or no specific variant is active, the corresponding color references will fallback to the colors defined here. If a given system color override is not specified, the color reference will fallback to the system's default colors. Colors can be referenced using the `colors/` prefix followed by the color name in areas where a color can be used for styling purposes."
    },
    "InnerLayoutControlWheel": {
      "description": "A set of 1 to 4 controls arranged in a group on the inner segment of the control wheel. The system determines how to best arrange controls from the group within the available space. Note that the interaction area of the entire inner segment will be equally divided among the assigned controls.",
      "anyOf": [
        {
          "maxItems": 4,
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/Control"
          },
          "type": "array"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Inner",
      "examples": [
        [],
        [
          {
            "type": "joystick",
            "axis": {
              "input": "axisXY",
              "output": "leftJoystick"
            }
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonLeftInnerWheelForDrivingLayouts"
        }
      ],
      "markdownDescription": "A set of 1 to 4 controls arranged in a group on the inner segment of the control wheel. The system determines how to best arrange controls from the group within the available space. Note that the interaction area of the entire inner segment will be equally divided among the assigned controls."
    },
    "SensorControl": {
      "markdownDescription": "An individual invisible control that takes interactions from a device's available sensors and translates them to outputs. Refer to the `type` property for information on the specific control types and their purpose.",
      "description": "An individual invisible control that takes interactions from a device's available sensors and translates them to outputs. Refer to the `type` property for information on the specific control types and their purpose.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "accelerometer",
            "gyroscope"
          ]
        }
      },
      "title": "Sensor Control",
      "examples": [
        {
          "$ref": "../../context.json#/definitions/commonGyroscopeControl"
        }
      ],
      "anyOf": [
        {
          "$ref": "#/$defs/_Accelerometer"
        },
        {
          "$ref": "#/$defs/_Gyroscope"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "_BackgroundColor": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "A color used to style the background. The exact shape where the color is used depends on the component and cannot be customized.",
          "type": "string",
          "const": "color",
          "markdownDescription": "A color used to style the background. The exact shape where the color is used depends on the component and cannot be customized."
        },
        "opacity": {
          "$ref": "#/$defs/Opacity"
        },
        "value": {
          "$ref": "#/$defs/Color"
        }
      },
      "examples": [
        {
          "type": "color",
          "value": "#0099ffaa"
        }
      ],
      "type": "object",
      "required": [
        "type",
        "value"
      ]
    },
    "ThrottleStyleBase": {
      "examples": [
        {
          "axisUp": {
            "cap": {
              "type": "color",
              "value": "#0099ffaa"
            },
            "stroke": {
              "color": "#0099ff",
              "type": "solid",
              "opacity": 1
            }
          },
          "axisDown": {
            "cap": {
              "type": "color",
              "value": "#0099ffaa"
            },
            "stroke": {
              "color": "#0099ff",
              "type": "solid",
              "opacity": 1
            }
          },
          "knob": {
            "background": {
              "type": "asset",
              "value": "CustomKnobBackgroundImage"
            },
            "stroke": {
              "type": "solid",
              "color": "#0099ffaa"
            },
            "faceImage": {
              "type": "asset",
              "value": "CustomKnobFaceImage"
            }
          }
        }
      ],
      "anyOf": [
        {
          "properties": {
            "indicator": {
              "$ref": "#/$defs/Indicator"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "axisUp": {
              "$ref": "#/$defs/ThrottleAxisStyle"
            },
            "axisDown": {
              "$ref": "#/$defs/ThrottleAxisStyle"
            },
            "knob": {
              "$ref": "#/$defs/Knob"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "Sticky": {
      "description": "This property changes if the control returns back to a neutral position when the player stops interacting with the control. Note that even when set, a sticky throttle will not remain in the `axisDown` region. This can be used, for instance, to implement a cruise control style feature. If omitted, a default value of `false` is used.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Sticky",
      "examples": [
        true,
        false,
        {
          "$ref": "../../context.json#/state/playerCruiseControlPreference"
        }
      ],
      "markdownDescription": "This property changes if the control returns back to a neutral position when the player stops interacting with the control. Note that even when set, a sticky throttle will not remain in the `axisDown` region. This can be used, for instance, to implement a cruise control style feature. If omitted, a default value of `false` is used."
    },
    "RenderAsButton": {
      "description": "This property causes the control to appear visually as a button. If omitted, a default value of `false` is used.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Render As Button",
      "examples": [
        true,
        false,
        {
          "$ref": "#/definitions/commonRenderAsButton"
        }
      ],
      "markdownDescription": "This property causes the control to appear visually as a button. If omitted, a default value of `false` is used."
    },
    "_ColorReference": {
      "type": "string",
      "anyOf": [
        {
          "type": "string",
          "pattern": "^colors/(?!system_)[a-zA-Z0-9\\.\\-_]+$"
        },
        {
          "type": "string",
          "enum": [
            "colors/system_contentPrimary",
            "colors/system_contentSecondary",
            "colors/system_contrastPrimary",
            "colors/system_contrastSecondary",
            "colors/system_actionColorDefault",
            "colors/system_actionColorA",
            "colors/system_actionColorB",
            "colors/system_actionColorX",
            "colors/system_actionColorY",
            "colors/system_accentPrimary",
            "colors/system_accentSecondary"
          ]
        }
      ]
    },
    "_Button": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/$defs/ControlEnabled"
        },
        "pullAction": {
          "$ref": "#/$defs/PullActionType"
        },
        "visible": {
          "$ref": "#/$defs/ControlVisibility"
        },
        "toggle": {
          "$ref": "#/$defs/Toggle"
        },
        "styles": {
          "$ref": "#/$defs/ButtonStyles"
        },
        "type": {
          "$ref": "#/$defs/_ControlTypeButton"
        },
        "action": {
          "$ref": "#/$defs/ActionType"
        }
      },
      "examples": [
        {
          "action": "gamepadA",
          "type": "button",
          "styles": {
            "default": {
              "faceImage": {
                "type": "icon",
                "value": "interact"
              }
            }
          }
        }
      ],
      "type": "object",
      "required": [
        "type",
        "action"
      ]
    },
    "JoystickDirectionIndicator": {
      "description": "The visual styling for an indicator of the direction of the interaction",
      "anyOf": [
        {
          "properties": {
            "type": {
              "description": "Property used to specify that the direction indicator is of color type whose value can be customized.",
              "type": "string",
              "const": "color",
              "markdownDescription": "Property used to specify that the direction indicator is of color type whose value can be customized."
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "value": {
              "$ref": "#/$defs/Color"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "type",
            "value"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Direction Indicator Styling Component",
      "examples": [
        {
          "type": "color",
          "value": "#0099ffaa"
        },
        {
          "$ref": "#/definitions/commonIndicatorStyling"
        }
      ],
      "markdownDescription": "The visual styling for an indicator of the direction of the interaction"
    },
    "Color": {
      "description": "This property defines a color using a string representation. Colors must be specified as a hexadecimal value following the `hex-color` CSS specification or by referencing a known system color or layout color by using a string starting with `colors/` followed by the name of the color. See https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color for more information.",
      "title": "Color",
      "$ref": "#/$defs/_Color",
      "markdownDescription": "This property defines a color using a string representation. Colors must be specified as a hexadecimal value following the `hex-color` CSS specification or by referencing a known system color or layout color by using a string starting with `colors/` followed by the name of the color. See https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color for more information."
    },
    "OuterLayoutControlWheel": {
      "description": "Defines the outer ring of controls or control groups present on the outer ring of the wheel. Each index can be either a single control or an array of controls. When an array is specified, this control group will take double the interaction space and any controls added may extend further out from the center of the wheel. In total the outer wheel has room for 8 individual controls or 4 control groups. Any controls beyond this may be removed or cause a validation rule failure. Note that the `null` control can be used at the beginning of the outer wheel array to offset control groups; when this is done, a final individual control can still be added.",
      "anyOf": [
        {
          "maxItems": 8,
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/OuterWheelControlGroup"
          },
          "type": "array"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Outer",
      "examples": [
        [],
        [
          null,
          [
            {
              "type": "button",
              "action": "gamepadX"
            }
          ],
          {
            "type": "button",
            "action": "gamepadY"
          }
        ],
        {
          "$ref": "#/definitions/commonLayerOuterWheel"
        }
      ],
      "markdownDescription": "Defines the outer ring of controls or control groups present on the outer ring of the wheel. Each index can be either a single control or an array of controls. When an array is specified, this control group will take double the interaction space and any controls added may extend further out from the center of the wheel. In total the outer wheel has room for 8 individual controls or 4 control groups. Any controls beyond this may be removed or cause a validation rule failure. Note that the `null` control can be used at the beginning of the outer wheel array to offset control groups; when this is done, a final individual control can still be added."
    },
    "_AxisMapping3DItem": {
      "description": "This property defines a single mapping from a player's three dimensional analog interactions with the control into either a one or two dimensional outputs. For three dimensional interactions, like with device sensors, the coordinate space is always relative to the game's video. In other words, it is such that the positive X direction is to the right of the video, the positive Y direction is to the top of the video and the positive Z direction is out of the video towards the player.",
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMapping3DTo2DOutput"
        },
        {
          "$ref": "#/$defs/_AxisMapping2DItem"
        }
      ],
      "title": "Three Dimensional Axis Mapping Item",
      "examples": [
        {
          "sensitivity": 0.3,
          "output": "rightJoystick",
          "input": "axisXY"
        },
        {
          "input": "axisUp",
          "output": "rightTrigger"
        },
        {
          "$ref": "#/definitions/commonAxisMapping"
        }
      ],
      "markdownDescription": "This property defines a single mapping from a player's three dimensional analog interactions with the control into either a one or two dimensional outputs. For three dimensional interactions, like with device sensors, the coordinate space is always relative to the game's video. In other words, it is such that the positive X direction is to the right of the video, the positive Y direction is to the top of the video and the positive Z direction is out of the video towards the player."
    },
    "_RelativeMouse1DOutputType": {
      "description": "This output type takes one dimensional control inputs and translates them to relative mouse movements along a single axis.",
      "enum": [
        "relativeMouseX",
        "relativeMouseY"
      ],
      "title": "Relative Mouse One Dimensional Output",
      "type": "string",
      "markdownDescription": "This output type takes one dimensional control inputs and translates them to relative mouse movements along a single axis."
    },
    "_InputMapping1D": {
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMapping1DToGamepad1DOutput"
        },
        {
          "$ref": "#/$defs/_InputMapping1DToRelativeMouse1DOutput"
        }
      ]
    },
    "ArcadeButton": {
      "description": "A single button on the `arcadeButtons` control type. This button is a simplified version of the `button` control type to work well in the arcade button arrangement.",
      "anyOf": [
        {
          "properties": {
            "action": {
              "$ref": "#/$defs/ActionType"
            },
            "enabled": {
              "$ref": "#/$defs/ControlEnabled"
            },
            "visible": {
              "$ref": "#/$defs/ControlVisibility"
            },
            "styles": {
              "$ref": "#/$defs/ArcadeButtonStyles"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "action"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "examples": [
        {
          "action": "gamepadX",
          "styles": {
            "default": {
              "faceImage": {
                "type": "icon",
                "value": "lightPunch"
              }
            }
          }
        },
        {
          "$ref": "../../context.json#/definitions/commonFightingButtons"
        }
      ],
      "markdownDescription": "A single button on the `arcadeButtons` control type. This button is a simplified version of the `button` control type to work well in the arcade button arrangement."
    },
    "Deadzone1D": {
      "description": "The normalized, minimum output value produced by the control. This is useful to counteract a deadzone programmed into the game. If omitted, no deadzone is used.",
      "anyOf": [
        {
          "properties": {
            "threshold": {
              "$ref": "#/$defs/DeadzoneThreshold"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "threshold"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "One Dimensional Deadzone",
      "examples": [
        {
          "threshold": 0
        },
        {
          "threshold": 0.1
        },
        {
          "$ref": "#/definitions/commonDeadzone"
        }
      ],
      "markdownDescription": "The normalized, minimum output value produced by the control. This is useful to counteract a deadzone programmed into the game. If omitted, no deadzone is used."
    },
    "Layer": {
      "description": "This property allows the definition of custom control layers that can be used in a control `action` to overlay additional control or change the layout content in response to a player action on another control.",
      "anyOf": [
        {
          "properties": {
            "lower": {
              "$ref": "#/$defs/LayerLowerContent"
            },
            "upper": {
              "$ref": "#/$defs/LayerUpperContent"
            },
            "left": {
              "$ref": "#/$defs/LayerControlWheel"
            },
            "center": {
              "$ref": "#/$defs/LayerControlWheel",
              "deprecated": true
            },
            "right": {
              "$ref": "#/$defs/LayerControlWheel"
            },
            "sensors": {
              "$ref": "#/$defs/LayerSensorContent"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Layers",
      "examples": [
        {
          "left": {
            "inner": [
              {
                "sticky": true,
                "axisUp": "rightTrigger",
                "type": "throttle",
                "axisDown": "leftTrigger"
              }
            ]
          }
        },
        {
          "$ref": "../../context.json#/definitions/commonLayerForDrivingLayouts"
        }
      ],
      "markdownDescription": "This property allows the definition of custom control layers that can be used in a control `action` to overlay additional control or change the layout content in response to a player action on another control."
    },
    "LayerControlWheel": {
      "description": "A set of layer controls organized in a circle or wheel shape.",
      "anyOf": [
        {
          "properties": {
            "outer": {
              "$ref": "#/$defs/OuterLayerControlWheel"
            },
            "inner": {
              "$ref": "#/$defs/InnerLayerControlWheel"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Layer Control Wheel",
      "examples": [
        {
          "outer": [
            {
              "type": "blank"
            },
            [
              null,
              {
                "type": "blank"
              },
              null
            ],
            {
              "type": "button",
              "action": "gamepadX"
            }
          ],
          "inner": [
            null,
            {
              "type": "blank"
            }
          ]
        },
        {
          "$ref": "#/definitions/commonWheelDefinitions"
        }
      ],
      "markdownDescription": "A set of layer controls organized in a circle or wheel shape."
    },
    "_Accelerometer": {
      "additionalProperties": false,
      "properties": {
        "axis": {
          "$ref": "#/$defs/AxisMapping3D"
        },
        "type": {
          "description": "An accelerometer control. This control allows translations from a device's motion, specifically its acceleration, into game input.",
          "title": "Accelerometer Control Type",
          "type": "string",
          "const": "accelerometer",
          "markdownDescription": "An accelerometer control. This control allows translations from a device's motion, specifically its acceleration, into game input."
        },
        "enabled": {
          "$ref": "#/$defs/ControlEnabled"
        }
      },
      "examples": [
        {
          "type": "accelerometer",
          "axis": {
            "input": "axisXY",
            "output": "leftJoystick"
          }
        }
      ],
      "type": "object",
      "required": [
        "type",
        "axis"
      ]
    },
    "ButtonPulledStyle": {
      "description": "Styling overrides used when the control is in the `pulled` state. The `pulled` state is when the control is being interacted with and used beyond the extents of the control causing additional actions to be executed.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "pullIndicator": {
              "$ref": "#/$defs/PullIndicator"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Pulled Style",
      "examples": [
        {},
        {
          "faceImage": {
            "type": "icon",
            "value": "interact"
          }
        },
        {
          "$ref": "#/definitions/commonButtonStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `pulled` state. The `pulled` state is when the control is being interacted with and used beyond the extents of the control causing additional actions to be executed."
    },
    "Scale": {
      "description": "Multiplier value used to change the size of the control. This value must be between 0.5 and 2. If omitted, a default value of 1 is used.",
      "anyOf": [
        {
          "minimum": 0.5,
          "type": "number",
          "maximum": 2
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Scale",
      "examples": [
        1,
        1.5,
        0.5,
        {
          "$ref": "../../context.json#/state/playerControlSizePreference"
        }
      ],
      "markdownDescription": "Multiplier value used to change the size of the control. This value must be between 0.5 and 2. If omitted, a default value of 1 is used."
    },
    "JoystickOutlineWithoutIndicator": {
      "description": "The visual styling for the outline of the control. This property, in other states where the control is being interacted with, can additionally include the ability to style an indicator for the direction of the interaction.",
      "anyOf": [
        {
          "properties": {
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "stroke": {
              "$ref": "#/$defs/Stroke"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Outline Styling Component",
      "examples": [
        {
          "stroke": {
            "type": "solid",
            "color": "#0099ffaa"
          }
        },
        {
          "$ref": "#/definitions/commonOutlineStyling"
        }
      ],
      "markdownDescription": "The visual styling for the outline of the control. This property, in other states where the control is being interacted with, can additionally include the ability to style an indicator for the direction of the interaction."
    },
    "JoystickDefaultStyle": {
      "description": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "outline": {
              "$ref": "#/$defs/JoystickOutlineWithIndicator"
            },
            "knob": {
              "$ref": "#/$defs/Knob"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Default Style",
      "examples": [
        {},
        {
          "knob": {
            "background": {
              "type": "asset",
              "value": "CustomKnobBackgroundImage"
            },
            "stroke": {
              "type": "solid",
              "color": "#0099ffaa"
            },
            "faceImage": {
              "type": "asset",
              "value": "CustomKnobFaceImage"
            }
          },
          "background": {
            "type": "asset",
            "value": "CustomJoystickBackgroundImage"
          }
        },
        {
          "$ref": "#/definitions/commonJoystickStyle"
        }
      ],
      "markdownDescription": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled."
    },
    "TurboActionInterval": {
      "markdownDescription": "This property defines the regular interval or period, in milliseconds, at which the assigned sub-action is turned on and off while the overall action is executed.",
      "description": "This property defines the regular interval or period, in milliseconds, at which the assigned sub-action is turned on and off while the overall action is executed.",
      "exclusiveMinimum": 0,
      "title": "Interval",
      "examples": [
        500,
        1000
      ],
      "type": "number"
    },
    "InputCurveRange": {
      "markdownDescription": "⚠️ Deprecated: This property may change behavior or be removed in future versions. This property defines the minimum and maximum values. All values are normalized so must be between -1 and 1.",
      "deprecated": true,
      "description": "⚠️ Deprecated: This property may change behavior or be removed in future versions. This property defines the minimum and maximum values. All values are normalized so must be between -1 and 1.",
      "title": "[DEPRECATED] Input Curve Range",
      "examples": [
        [
          0,
          0.33
        ],
        [
          0,
          1
        ],
        {
          "$ref": "#/definitions/commonJoystickInputRange"
        },
        [
          {
            "$ref": "#/definitions/commonJoystickInputRangeMin"
          },
          {
            "$ref": "#/definitions/commonJoystickInputRangeMax"
          }
        ]
      ],
      "anyOf": [
        {
          "maxItems": 2,
          "minItems": 2,
          "items": {
            "anyOf": [
              {
                "minimum": -1,
                "type": "number",
                "maximum": 1
              },
              {
                "$ref": "#/$defs/Reference"
              }
            ]
          },
          "type": "array"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "LayoutContent": {
      "description": "This property defines the actual content of the layout. Content on the layout is organized into containers based on where on the display, like `lower`, it should appear. The `left` and `right` areas are special locations because they are intended to be centered underneath the player's thumbs and can be moved and customized by the player to best fit their device and preferred way to play. Within each container controls, like a button, can either be directly specified or placed into sub-containers based on named properties or sub-arrays.",
      "anyOf": [
        {
          "properties": {
            "left": {
              "$ref": "#/$defs/LayoutControlWheel"
            },
            "lower": {
              "$ref": "#/$defs/LayoutLowerContent"
            },
            "upper": {
              "$ref": "#/$defs/LayoutUpperContent"
            },
            "layers": {
              "$ref": "#/$defs/Layers"
            },
            "center": {
              "$ref": "#/$defs/LayoutControlWheel",
              "deprecated": true
            },
            "right": {
              "$ref": "#/$defs/LayoutControlWheel"
            },
            "sensors": {
              "$ref": "#/$defs/LayerSensorContent"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Layout Content",
      "examples": [
        {},
        {
          "left": {
            "inner": [
              {
                "type": "joystick",
                "axis": {
                  "input": "axisXY",
                  "output": "leftJoystick"
                }
              }
            ]
          },
          "right": {
            "outer": [
              {
                "type": "button",
                "action": "gamepadY"
              }
            ]
          }
        }
      ],
      "markdownDescription": "This property defines the actual content of the layout. Content on the layout is organized into containers based on where on the display, like `lower`, it should appear. The `left` and `right` areas are special locations because they are intended to be centered underneath the player's thumbs and can be moved and customized by the player to best fit their device and preferred way to play. Within each container controls, like a button, can either be directly specified or placed into sub-containers based on named properties or sub-arrays."
    },
    "LayoutLowerContent": {
      "description": "This property defines the content of the layout that is fixed to the bottom edge of the available display space. Content along the lower edge is centered and grows outward towards the left and right edges. Because this content is in the center of the display, it can be difficult to reach for larger devices. As such, it is recommended to place less frequently used controls in this space like switching camera modes or other mode swaps.",
      "anyOf": [
        {
          "properties": {
            "center": {
              "$ref": "#/$defs/Control"
            },
            "leftCenter": {
              "$ref": "#/$defs/LayoutLowerArrayContent"
            },
            "rightCenter": {
              "$ref": "#/$defs/LayoutLowerArrayContent"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Lower Layout Content",
      "examples": [
        {
          "center": {
            "type": "button",
            "action": "dPadDown"
          }
        },
        {
          "leftCenter": [
            {
              "type": "button",
              "action": "dPadLeft"
            }
          ],
          "rightCenter": [
            {
              "type": "button",
              "action": "dPadRight"
            }
          ]
        },
        {
          "$ref": "../../context.json#/definitions/commonLayoutLowerContent"
        }
      ],
      "markdownDescription": "This property defines the content of the layout that is fixed to the bottom edge of the available display space. Content along the lower edge is centered and grows outward towards the left and right edges. Because this content is in the center of the display, it can be difficult to reach for larger devices. As such, it is recommended to place less frequently used controls in this space like switching camera modes or other mode swaps."
    },
    "_AxisMapping2DItem": {
      "description": "This property defines a single mapping from a player's two dimensional analog interactions with the control into either one or two dimensions outputs. Note that based on the axis assignments, the look and feel of the control may change.",
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMapping2D"
        },
        {
          "$ref": "#/$defs/_InputMapping1D"
        },
        {
          "$ref": "#/$defs/_InputMappingMagnitudinal"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Two Dimensional Axis Mapping Item",
      "examples": [
        {
          "sensitivity": 0.3,
          "output": "rightJoystick",
          "input": "axisXY"
        },
        {
          "input": "axisUp",
          "output": "rightTrigger"
        },
        {
          "$ref": "#/definitions/commonAxisMapping"
        }
      ],
      "markdownDescription": "This property defines a single mapping from a player's two dimensional analog interactions with the control into either one or two dimensions outputs. Note that based on the axis assignments, the look and feel of the control may change."
    },
    "DeadzoneThreshold": {
      "description": "The normalized, input value needed in order to produce output values.",
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Threshold",
      "examples": [
        0.5,
        1,
        0,
        {
          "$ref": "#/definitions/commonDeadzoneThreshold"
        }
      ],
      "markdownDescription": "The normalized, input value needed in order to produce output values."
    },
    "JoystickDisabledStyle": {
      "description": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "outline": {
              "$ref": "#/$defs/JoystickOutlineWithoutIndicator"
            },
            "knob": {
              "$ref": "#/$defs/Knob"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Disabled Style",
      "examples": [
        {},
        {
          "knob": {
            "background": {
              "type": "asset",
              "value": "CustomKnobBackgroundImage"
            },
            "stroke": {
              "type": "solid",
              "color": "#0099ffaa"
            },
            "faceImage": {
              "type": "asset",
              "value": "CustomKnobFaceImage"
            }
          },
          "background": {
            "type": "asset",
            "value": "CustomJoystickBackgroundImage"
          }
        },
        {
          "$ref": "#/definitions/commonJoystickStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled."
    },
    "_InputMappingMagnitudinalToGamepadMagnitudinalOutput": {
      "properties": {
        "sensitivity": {
          "$ref": "#/$defs/Sensitivity"
        },
        "output": {
          "anyOf": [
            {
              "$ref": "#/$defs/_ControllerAnalogMagnitudinalOutputType"
            },
            {
              "$ref": "#/$defs/Reference"
            }
          ]
        },
        "input": {
          "$ref": "#/$defs/_InputAxisMagnitudinal"
        },
        "deadzone": {
          "$ref": "#/$defs/Deadzone1D"
        },
        "responseCurve": {
          "$ref": "#/$defs/InputCurve"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "output"
      ]
    },
    "RelativeInteraction": {
      "description": "This property determines how interactions with the control are calculated. Interactions are calculated either relative to where the interaction began or in an absolute fashion using the control's center. If omitted, a default value of `true` is used to calculate relative to the interaction's starting point.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Relative",
      "examples": [
        true,
        false,
        {
          "$ref": "../../context.json#/state/playerRelativeControlPreference"
        }
      ],
      "markdownDescription": "This property determines how interactions with the control are calculated. Interactions are calculated either relative to where the interaction began or in an absolute fashion using the control's center. If omitted, a default value of `true` is used to calculate relative to the interaction's starting point."
    },
    "FaceImageIconValue": {
      "description": "This property is used to select which built-in icon to use for this component.",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "ability",
            "ability2",
            "ability3",
            "abilityPowerPunch",
            "abilityPowerUp",
            "accept",
            "add",
            "aim",
            "armor",
            "arrow",
            "arrowReload",
            "attackBehind",
            "barrel",
            "block",
            "bomb",
            "book",
            "bow",
            "brakePedal",
            "brightness",
            "capture",
            "character",
            "characterSelect",
            "characterSelect2",
            "chat",
            "climbStairs",
            "close",
            "compass",
            "cover",
            "crouch",
            "cursor",
            "dPad",
            "dash",
            "defendByShield",
            "dodge",
            "downArrow",
            "downArrow2",
            "downChevron",
            "emotes",
            "enterCar",
            "enterDoor",
            "exit",
            "exitCar",
            "exitDoor",
            "fastForward",
            "fire",
            "firePunch",
            "flag",
            "gasPedal",
            "glide",
            "golf",
            "grab",
            "grenade",
            "gyroscope",
            "handbrake",
            "handbrake2",
            "health",
            "heavyKick",
            "heavyKick2",
            "heavyKick3",
            "heavyKick4",
            "heavyPunch",
            "heavyPunch2",
            "heavyPunch3",
            "heavySword",
            "heavySword2",
            "help",
            "horn",
            "hourglass",
            "interact",
            "internet",
            "inventory",
            "jump",
            "kick",
            "largeGridView",
            "leftArrow",
            "leftArrow2",
            "leftChevron",
            "leftRightArrows",
            "lightKick",
            "lightKick2",
            "lightKick3",
            "lightKick4",
            "lightPunch",
            "lightPunch2",
            "lightPunch3",
            "lightSword",
            "lightSword2",
            "look",
            "lookBehind",
            "lookBehind2",
            "lookByHand",
            "map",
            "map2",
            "medical",
            "meditate",
            "mediumKick",
            "mediumKick2",
            "mediumKick3",
            "mediumKick4",
            "mediumPunch",
            "mediumPunch2",
            "mediumPunch3",
            "mediumSword",
            "mediumSword2",
            "microphone",
            "mirror",
            "moreActions",
            "move",
            "move2",
            "notebook",
            "parameters",
            "pause",
            "phone",
            "pickAxe",
            "placeholder",
            "plane",
            "planeFast",
            "planeSlow",
            "punch",
            "punch2",
            "radialMenu",
            "radialMenu2",
            "radio",
            "ram",
            "redo",
            "reload",
            "repeatRefresh",
            "reset",
            "rewind",
            "rightArrow",
            "rightArrow2",
            "rightChevron",
            "roll",
            "run",
            "select",
            "selectAll",
            "selectionWheel",
            "sit",
            "skateboard",
            "skateboardGrab",
            "skateboardGrind",
            "skateboardJump",
            "skateboardOllie",
            "skateboardRampOver",
            "slide",
            "smallGridView",
            "speaker",
            "specialAbility",
            "sprint",
            "stealth",
            "steering",
            "stopwatch",
            "subtract",
            "surf",
            "switchCamera",
            "sword",
            "sword2",
            "sync",
            "targetLock",
            "team",
            "teamAttack",
            "throw",
            "titleMenu",
            "touch",
            "undo",
            "upArrow",
            "upArrow2",
            "upChevron",
            "walk",
            "waypoint",
            "weaponSelect",
            "zoomIn",
            "zoomOut"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Face Image Icon",
      "examples": [
        "heavyPunch",
        {
          "$ref": "../../context.json#/definitions/commonIconForPunch"
        }
      ],
      "markdownDescription": "This property is used to select which built-in icon to use for this component."
    },
    "LayoutUpperRightContent": {
      "description": "This property defines layout content that is fixed to the upper right corner of the available display space. Controls added to this container start in the corner and grow inward towards the top center of the screen.",
      "anyOf": [
        {
          "minItems": 1,
          "maxItems": 5,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/Control"
              },
              {
                "$ref": "#/$defs/_Null"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Upper Right Layout Content",
      "examples": [
        [
          {
            "type": "button",
            "action": "menu"
          },
          {
            "type": "button",
            "action": "view"
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonUpperRightControls"
        }
      ],
      "markdownDescription": "This property defines layout content that is fixed to the upper right corner of the available display space. Controls added to this container start in the corner and grow inward towards the top center of the screen."
    },
    "_Throttle": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "$ref": "#/$defs/_ControlTypeThrottle"
        },
        "styles": {
          "$ref": "#/$defs/ThrottleStyles"
        },
        "axisDown": {
          "$ref": "#/$defs/ThrottleAxisOutput"
        },
        "relative": {
          "$ref": "#/$defs/RelativeInteraction"
        },
        "axisUp": {
          "$ref": "#/$defs/ThrottleAxisOutput"
        },
        "visible": {
          "$ref": "#/$defs/ControlVisibility"
        },
        "sticky": {
          "$ref": "#/$defs/Sticky"
        },
        "enabled": {
          "$ref": "#/$defs/ControlEnabled"
        }
      },
      "examples": [
        {
          "sticky": true,
          "axisUp": "rightTrigger",
          "type": "throttle",
          "axisDown": "leftTrigger"
        }
      ],
      "type": "object",
      "required": [
        "type",
        "axisDown",
        "axisUp"
      ]
    },
    "_FaceImageIcon": {
      "properties": {
        "label": {
          "$ref": "#/$defs/FaceImageIconLabel"
        },
        "type": {
          "description": "A built-in icon used as the foreground graphic for the control component.",
          "title": "Face Image Icon Styling Component",
          "type": "string",
          "const": "icon",
          "markdownDescription": "A built-in icon used as the foreground graphic for the control component."
        },
        "opacity": {
          "$ref": "#/$defs/Opacity"
        },
        "value": {
          "$ref": "#/$defs/FaceImageIconValue"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "type",
        "value"
      ]
    },
    "_InputMappingZYToMouse2DOutput": {
      "properties": {
        "sensitivity": {
          "$ref": "#/$defs/Sensitivity"
        },
        "output": {
          "$ref": "#/$defs/_RelativeMouse2DOutputType"
        },
        "input": {
          "$ref": "#/$defs/_InputAxisZY"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "input",
        "output"
      ]
    },
    "_SystemColorAccentSecondary": {
      "description": "This property overrides the accent secondary system color used for styling components such as the ergo-edit outer wheel.",
      "title": "Accent Secondary System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the accent secondary system color used for styling components such as the ergo-edit outer wheel."
    },
    "_ControllerAnalog2DOutputType": {
      "description": "Outputs values along the entirety of both gamepad joystick axes.",
      "enum": [
        "rightJoystick",
        "leftJoystick"
      ],
      "title": "Gamepad Analog Joystick Output",
      "type": "string",
      "markdownDescription": "Outputs values along the entirety of both gamepad joystick axes."
    },
    "_SystemColorContentPrimary": {
      "description": "This property overrides the primary system color used for styling components such as middle strokes, icon tints, and dpad gradients.",
      "title": "Content Primary System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the primary system color used for styling components such as middle strokes, icon tints, and dpad gradients."
    },
    "_DirectionalPad": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "$ref": "#/$defs/_ControlTypeDirectionalPad"
        },
        "enabled": {
          "$ref": "#/$defs/ControlEnabled"
        },
        "visible": {
          "$ref": "#/$defs/ControlVisibility"
        },
        "styles": {
          "$ref": "#/$defs/DirectionalPadStyles"
        },
        "interaction": {
          "$ref": "#/$defs/DirectionalPadInteraction"
        },
        "deadzone": {
          "$ref": "#/$defs/DeadzoneDirectionalPad"
        },
        "scale": {
          "$ref": "#/$defs/Scale"
        }
      },
      "examples": [
        {
          "type": "directionalPad"
        }
      ],
      "type": "object",
      "required": [
        "type"
      ]
    },
    "Stroke": {
      "description": "The visual styling for the stroke of the control component. The stroke is usually a border or outline used to show the extent of the control component.",
      "title": "Stroke Styling Component",
      "$ref": "#/$defs/_StrokeBase",
      "markdownDescription": "The visual styling for the stroke of the control component. The stroke is usually a border or outline used to show the extent of the control component."
    },
    "ThrottleAxisStyle": {
      "description": "The visual styling of the throttle axis component. This component gives the player an indication of the range of possible inputs as well as what region the control is currently in, either up or down.",
      "anyOf": [
        {
          "properties": {
            "cap": {
              "$ref": "#/$defs/AxisCap"
            },
            "stroke": {
              "$ref": "#/$defs/Stroke"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Throttle Axis Styling Component",
      "examples": [
        {
          "cap": {
            "type": "color",
            "value": "#0099ffaa"
          },
          "stroke": {
            "color": "#0099ff",
            "type": "solid",
            "opacity": 1
          }
        }
      ],
      "markdownDescription": "The visual styling of the throttle axis component. This component gives the player an indication of the range of possible inputs as well as what region the control is currently in, either up or down."
    },
    "_SystemColorContrastPrimary": {
      "description": "This property overrides the contrast primary system color used for styling contrast components such as inner/outer strokes and face image backplates.",
      "title": "Contrast Primary System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the contrast primary system color used for styling contrast components such as inner/outer strokes and face image backplates."
    },
    "_FaceImageAsset": {
      "properties": {
        "type": {
          "description": "A custom asset used as the foreground graphic for the control component.",
          "title": "Face Image Asset Styling Component",
          "type": "string",
          "const": "asset",
          "markdownDescription": "A custom asset used as the foreground graphic for the control component."
        },
        "opacity": {
          "$ref": "#/$defs/Opacity"
        },
        "value": {
          "$ref": "#/$defs/FaceImageAssetValue"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "type",
        "value"
      ]
    },
    "_Blank": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "When creating a layout that uses layers, a blank control type is used to override or hide an existing control or group of controls on the layers underneath it. The blank control is not interactable and does not have any stylable components.",
          "title": "Blank Control Type",
          "type": "string",
          "const": "blank",
          "markdownDescription": "When creating a layout that uses layers, a blank control type is used to override or hide an existing control or group of controls on the layers underneath it. The blank control is not interactable and does not have any stylable components."
        }
      },
      "examples": [
        {
          "type": "blank"
        }
      ],
      "type": "object",
      "required": [
        "type"
      ]
    },
    "_SystemColorGamepadActionColor": {
      "description": "This property overrides the corresponding gamepad action system color used for styling components on controls where the `action` field is set to `gamepadA`, `gamepadB`, `gamepadX`, or `gamepadY`.",
      "title": "Gamepad Action System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the corresponding gamepad action system color used for styling components on controls where the `action` field is set to `gamepadA`, `gamepadB`, `gamepadX`, or `gamepadY`."
    },
    "ThrottleStyles": {
      "description": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state.",
      "anyOf": [
        {
          "properties": {
            "idleUp": {
              "description": "Styling overrides used when the control is in the `idleUp` state. The `idleUp` state is when the control is not being interacted with but the control's value remains in the region above the control's center. This state can only be reached when the control is `sticky`.",
              "title": "Control Idle Up Style",
              "$ref": "#/$defs/ThrottleStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `idleUp` state. The `idleUp` state is when the control is not being interacted with but the control's value remains in the region above the control's center. This state can only be reached when the control is `sticky`."
            },
            "disabled": {
              "description": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled.",
              "title": "Control Disabled Style",
              "$ref": "#/$defs/ThrottleStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled."
            },
            "activatedUp": {
              "description": "Styling overrides used when the control is in the `activatedUp` state. The `activatedUp` state is when the control is being interacted with, specifically in the region above the control's center.",
              "title": "Control Activated Up Style",
              "$ref": "#/$defs/ThrottleStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `activatedUp` state. The `activatedUp` state is when the control is being interacted with, specifically in the region above the control's center."
            },
            "idle": {
              "description": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting.",
              "title": "Control Idle Style",
              "$ref": "#/$defs/ThrottleStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting."
            },
            "activated": {
              "description": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed.",
              "title": "Control Activated Style",
              "$ref": "#/$defs/ThrottleStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed."
            },
            "activatedDown": {
              "description": "Styling overrides used when the control is in the `activatedDown` state. The `activatedDown` state is when the control is being interacted with, specifically in the region below the control's center.",
              "title": "Control Activated Down Style",
              "$ref": "#/$defs/ThrottleStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `activatedDown` state. The `activatedDown` state is when the control is being interacted with, specifically in the region below the control's center."
            },
            "default": {
              "description": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled.",
              "title": "Control Default Style",
              "$ref": "#/$defs/ThrottleStyleBase",
              "markdownDescription": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled."
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Styles",
      "examples": [
        {
          "default": {
            "axisUp": {
              "cap": {
                "type": "color",
                "value": "#0099ffaa"
              },
              "stroke": {
                "color": "#0099ff",
                "type": "solid",
                "opacity": 1
              }
            },
            "axisDown": {
              "cap": {
                "type": "color",
                "value": "#0099ffaa"
              },
              "stroke": {
                "color": "#0099ff",
                "type": "solid",
                "opacity": 1
              }
            },
            "knob": {
              "background": {
                "type": "asset",
                "value": "CustomKnobBackgroundImage"
              },
              "stroke": {
                "type": "solid",
                "color": "#0099ffaa"
              },
              "faceImage": {
                "type": "asset",
                "value": "CustomKnobFaceImage"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/commonThrottleStyles"
        }
      ],
      "markdownDescription": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state."
    },
    "LayoutSensorContent": {
      "description": "This property defines a container of layout content that uses the device's sensor inputs as interactions.",
      "anyOf": [
        {
          "minItems": 1,
          "maxItems": 4,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/SensorControl"
              },
              {
                "$ref": "#/$defs/_Null"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Sensors Layout Content",
      "examples": [
        [
          {
            "type": "gyroscope",
            "axis": {
              "input": "axisXY",
              "output": "rightJoystick"
            }
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonSensors"
        }
      ],
      "markdownDescription": "This property defines a container of layout content that uses the device's sensor inputs as interactions."
    },
    "AxisCapColor": {
      "description": "The visual styling used to depict the limit of an axis control component. This can be styled with a color to semantically indicate the maximum or minimum value of the axis.",
      "anyOf": [
        {
          "properties": {
            "type": {
              "description": "The visual styling used to depict the limit of an axis control component. This can be styled with a color to semantically indicate the maximum or minimum value of the axis.",
              "title": "Axis Cap Styling Component",
              "type": "string",
              "const": "color",
              "markdownDescription": "The visual styling used to depict the limit of an axis control component. This can be styled with a color to semantically indicate the maximum or minimum value of the axis."
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "value": {
              "$ref": "#/$defs/Color"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "type",
            "value"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Axis Cap Styling Component",
      "examples": [
        {
          "type": "color",
          "value": "#0099ffaa"
        }
      ],
      "markdownDescription": "The visual styling used to depict the limit of an axis control component. This can be styled with a color to semantically indicate the maximum or minimum value of the axis."
    },
    "_StrokeBase": {
      "examples": [
        {
          "color": "#0099ff",
          "type": "solid",
          "opacity": 1
        },
        {
          "$ref": "#/definitions/commonControlStroke"
        }
      ],
      "anyOf": [
        {
          "properties": {
            "color": {
              "$ref": "#/$defs/Color"
            },
            "type": {
              "description": "This styling component is used to specify a solid stroke with customizable color and opacity.",
              "type": "string",
              "const": "solid",
              "markdownDescription": "This styling component is used to specify a solid stroke with customizable color and opacity."
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object",
          "required": [
            "type"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "Background": {
      "description": "The visual styling of the background of the control component. The background can be a `color` or `asset`.",
      "anyOf": [
        {
          "$ref": "#/$defs/_BackgroundColor"
        },
        {
          "$ref": "#/$defs/_BackgroundAsset"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Background Styling Component",
      "markdownDescription": "The visual styling of the background of the control component. The background can be a `color` or `asset`."
    },
    "_ControllerAnalog1DOutputType": {
      "description": "Outputs values along the entirety of the specified gamepad joystick axis.",
      "enum": [
        "leftJoystickX",
        "leftJoystickY",
        "rightJoystickX",
        "rightJoystickY"
      ],
      "title": "Gamepad Analog Joystick Output",
      "type": "string",
      "markdownDescription": "Outputs values along the entirety of the specified gamepad joystick axis."
    },
    "FaceImageAssetValue": {
      "$ref": "#/$defs/AssetReference"
    },
    "Knob": {
      "description": "The visual styling for the knob of the control. The knob is the interaction point of the control that mimics the top of a joystick for instance.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "stroke": {
              "$ref": "#/$defs/Stroke"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Knob Styling Component",
      "examples": [
        {
          "background": {
            "type": "asset",
            "value": "CustomKnobBackgroundImage"
          },
          "stroke": {
            "type": "solid",
            "color": "#0099ffaa"
          },
          "faceImage": {
            "type": "asset",
            "value": "CustomKnobFaceImage"
          }
        },
        {
          "$ref": "#/definitions/commonControlKnobStyling"
        }
      ],
      "markdownDescription": "The visual styling for the knob of the control. The knob is the interaction point of the control that mimics the top of a joystick for instance."
    },
    "DirectionalPadInteractionActivationType": {
      "description": "This property determines how the control and its subcomponents are activated in response to player interaction. The activation type can either be `exclusive` or `allowNeighboring`. When set to `exclusive`, only a single subcomponent of the control will be activated at a time. If `allowNeighboring` is set, multiple subcomponents of the control can be simultaneously activated based on where the player is interacting with the control. If omitted, a default value of `allowNeighboring` is used.",
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "exclusive",
            "allowNeighboring"
          ]
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Activation Type",
      "examples": [
        "exclusive",
        "allowNeighboring",
        {
          "$ref": "../../context.json#/state/playerDpadInteractionPreference"
        }
      ],
      "markdownDescription": "This property determines how the control and its subcomponents are activated in response to player interaction. The activation type can either be `exclusive` or `allowNeighboring`. When set to `exclusive`, only a single subcomponent of the control will be activated at a time. If `allowNeighboring` is set, multiple subcomponents of the control can be simultaneously activated based on where the player is interacting with the control. If omitted, a default value of `allowNeighboring` is used."
    },
    "FaceImageIconLabel": {
      "description": "This property determines how labels are shown on the face image icon. The `action` type is useful when using semantic imagery to remind players what the corresponding actions are in the case game prompts and imagery does not match the semantic icon perfectly. To hide these additional labels, the `none` type can be used. If omitted, a default value of `action` is used.",
      "anyOf": [
        {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "action",
                "none"
              ]
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Face Image Icon Label Styling Component",
      "examples": [
        {
          "type": "action"
        },
        {
          "type": "none"
        },
        {
          "$ref": "../../context.json#/state/playerShowButtonLabelsPreference"
        }
      ],
      "markdownDescription": "This property determines how labels are shown on the face image icon. The `action` type is useful when using semantic imagery to remind players what the corresponding actions are in the case game prompts and imagery does not match the semantic icon perfectly. To hide these additional labels, the `none` type can be used. If omitted, a default value of `action` is used."
    },
    "SensorLayerControl": {
      "markdownDescription": "An individual invisible control that takes interactions from a device's available sensors and translates them to outputs. The `blank` control can be used to hide or turn off sensor controls from the layer(s) underneath this one.",
      "description": "An individual invisible control that takes interactions from a device's available sensors and translates them to outputs. The `blank` control can be used to hide or turn off sensor controls from the layer(s) underneath this one.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "accelerometer",
            "gyroscope",
            "blank"
          ]
        }
      },
      "title": "Layer Sensor Control",
      "examples": [
        {
          "type": "blank"
        },
        {
          "$ref": "../../context.json#/definitions/commonGyroscopeControl"
        }
      ],
      "anyOf": [
        {
          "$ref": "#/$defs/_Accelerometer"
        },
        {
          "$ref": "#/$defs/_Gyroscope"
        },
        {
          "$ref": "#/$defs/_Blank"
        },
        {
          "$ref": "#/$defs/_Null"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ]
    },
    "ButtonDisabledStyle": {
      "description": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "faceImage": {
              "$ref": "#/$defs/FaceImage"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Disabled Style",
      "examples": [
        {},
        {
          "faceImage": {
            "type": "icon",
            "value": "interact"
          }
        },
        {
          "$ref": "#/definitions/commonButtonStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled."
    },
    "Layers": {
      "description": "This property allows the definition of custom control layers that can be used in a control `action` to overlay additional control or change the layout content in response to a player action on another control.",
      "anyOf": [
        {
          "additionalProperties": false,
          "patternProperties": {
            "^(?!__proto__)[a-zA-Z0-9\\.\\-_]+$": {
              "$ref": "#/$defs/Layer"
            }
          },
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Touch Layout Layers",
      "examples": [
        {
          "AdvancedDrivingLayer": {
            "left": {
              "inner": [
                {
                  "sticky": true,
                  "axisUp": "rightTrigger",
                  "type": "throttle",
                  "axisDown": "leftTrigger"
                }
              ]
            }
          }
        },
        {
          "$ref": "../../context.json#/definitions/commonLayersForDrivingLayouts"
        }
      ],
      "markdownDescription": "This property allows the definition of custom control layers that can be used in a control `action` to overlay additional control or change the layout content in response to a player action on another control."
    },
    "_SystemColorContentSecondary": {
      "description": "This property overrides the secondary system color used for styling components such as backgrounds and fills.",
      "title": "Content Secondary System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the secondary system color used for styling components such as backgrounds and fills."
    },
    "_LayoutAction": {
      "examples": [
        {
          "type": "layer",
          "target": "WeaponSelectLayer"
        }
      ],
      "additionalProperties": false,
      "description": "Action type that triggers a layout change like applying a layer while the action is being executed.",
      "markdownDescription": "Action type that triggers a layout change like applying a layer while the action is being executed.",
      "required": [
        "type",
        "target"
      ],
      "title": "Layout Action",
      "properties": {
        "target": {
          "$ref": "#/$defs/LayoutActionTarget"
        },
        "type": {
          "description": "Action type that triggers a layout change like applying a layer while the action is being executed.",
          "title": "Layout Action",
          "type": "string",
          "const": "layer",
          "markdownDescription": "Action type that triggers a layout change like applying a layer while the action is being executed."
        }
      },
      "type": "object"
    },
    "InnerLayerControlWheel": {
      "description": "A set of 1 to 4 layer controls, including the `blank` control to hide controls from the layer(s) below, arranged in a group on the inner segment of the control wheel. The system determines how to best arrange controls from the group within the available space. Note that the interaction area of the entire inner segment will be equally divided among the assigned controls. Also note that if a control group from a layer below has a different number of items than this control group, all items from that layer will be hidden.",
      "anyOf": [
        {
          "maxItems": 4,
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/LayerControl"
          },
          "type": "array"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Inner",
      "examples": [
        [],
        [
          null,
          {
            "type": "blank"
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonLeftInnerWheelForDrivingLayouts"
        }
      ],
      "markdownDescription": "A set of 1 to 4 layer controls, including the `blank` control to hide controls from the layer(s) below, arranged in a group on the inner segment of the control wheel. The system determines how to best arrange controls from the group within the available space. Note that the interaction area of the entire inner segment will be equally divided among the assigned controls. Also note that if a control group from a layer below has a different number of items than this control group, all items from that layer will be hidden."
    },
    "ArcadeButtonStyles": {
      "description": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state.",
      "anyOf": [
        {
          "properties": {
            "default": {
              "description": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled.",
              "title": "Control Default Style",
              "$ref": "#/$defs/ArcadeButtonStyleBase",
              "markdownDescription": "Default styling parameters to be applied to the control. These parameters are used to override the system provided default styling for the control. The visuals can be further overridden by specifying styles for a specific state. Note that in a specific state, like `disabled`, when no specific styles are provided, the default styles will be used as a fallback though some changes may be made for that state, like decreasing the overall opacity to indicate the control is disabled."
            },
            "idle": {
              "description": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting.",
              "title": "Control Idle Style",
              "$ref": "#/$defs/ArcadeButtonStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting."
            },
            "disabled": {
              "description": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled.",
              "title": "Control Disabled Style",
              "$ref": "#/$defs/ArcadeButtonStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `disabled` state. In this state, the control is visually disabled even though outputs are still executed when a player interacts with the control. Unless explicitly overridden here, values provided in the `default` styling configuration will be used with a reduced overall control opacity and any interaction indicators will be hidden to show that the control is disabled."
            },
            "activated": {
              "description": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed.",
              "title": "Control Activated Style",
              "$ref": "#/$defs/ArcadeButtonStyleBase",
              "markdownDescription": "Styling overrides used when the control is in the `activated` state. The `activated` state is when the control is being interacted with and its action is being executed."
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Styles",
      "examples": [
        {
          "default": {
            "faceImage": {
              "type": "asset",
              "value": "CustomDefaultArcadeButtonFaceImage"
            },
            "background": {
              "type": "asset",
              "value": "CustomDefaultArcadeButtonBackgroundImage"
            }
          },
          "activated": {
            "faceImage": {
              "type": "asset",
              "value": "CustomActivatedArcadeButtonFaceImage"
            },
            "background": {
              "type": "asset",
              "value": "CustomActivatedArcadeButtonBackgroundImage"
            }
          }
        },
        {
          "$ref": "#/definitions/commonArcadeButtonStyles"
        }
      ],
      "markdownDescription": "Visual styling definition of the control. For each state of the control, styling can be overridden. For any elements that are not customized in a specific state, the `default` styling property or the system's defaults will be used as a basis to style the control. The system may still modify a control's visuals from the `default` style as appropriate in a specific state, for instance by reducing opacity in the `disabled` state."
    },
    "LayoutLowerArrayContent": {
      "description": "This property defines the content of the layout that is an array growing outward from the bottom center of the available display area. This property operates identically to the same named property of the layout content except that this property additionally allows the `blank` control to be used to hide controls from the layer(s) underneath this one.",
      "anyOf": [
        {
          "minItems": 1,
          "maxItems": 4,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/$defs/Control"
              },
              {
                "$ref": "#/$defs/_Null"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Lower Layout Array Content",
      "examples": [
        [
          {
            "type": "button",
            "action": "dPadLeft"
          }
        ],
        {
          "$ref": "../../context.json#/definitions/commonLayoutLowerLeftCenterContent"
        }
      ],
      "markdownDescription": "This property defines the content of the layout that is an array growing outward from the bottom center of the available display area. This property operates identically to the same named property of the layout content except that this property additionally allows the `blank` control to be used to hide controls from the layer(s) underneath this one."
    },
    "_InputMappingMagnitudinal": {
      "anyOf": [
        {
          "$ref": "#/$defs/_InputMappingMagnitudinalToGamepadMagnitudinalOutput"
        }
      ]
    },
    "LayerUpperContent": {
      "description": "This property defines layer content that is fixed to the top edge of the available display space. This property mirrors the main layout's upper area except that it allows the `blank` control type to be used to hide controls from the layer(s) underneath this one.",
      "anyOf": [
        {
          "properties": {
            "right": {
              "$ref": "#/$defs/LayerUpperRightContent"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Upper Layer Content",
      "examples": [
        {
          "right": [
            {
              "type": "blank"
            },
            {
              "type": "button",
              "action": "view"
            }
          ]
        },
        {
          "$ref": "../../context.json#/definitions/commonUpperLayerControls"
        }
      ],
      "markdownDescription": "This property defines layer content that is fixed to the top edge of the available display space. This property mirrors the main layout's upper area except that it allows the `blank` control type to be used to hide controls from the layer(s) underneath this one."
    },
    "JoystickIdleStyle": {
      "description": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting.",
      "anyOf": [
        {
          "properties": {
            "background": {
              "$ref": "#/$defs/Background"
            },
            "opacity": {
              "$ref": "#/$defs/Opacity"
            },
            "outline": {
              "$ref": "#/$defs/JoystickOutlineWithoutIndicator"
            },
            "knob": {
              "$ref": "#/$defs/Knob"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Control Idle Style",
      "examples": [
        {},
        {
          "knob": {
            "background": {
              "type": "asset",
              "value": "CustomKnobBackgroundImage"
            },
            "stroke": {
              "type": "solid",
              "color": "#0099ffaa"
            },
            "faceImage": {
              "type": "asset",
              "value": "CustomKnobFaceImage"
            }
          },
          "background": {
            "type": "asset",
            "value": "CustomJoystickBackgroundImage"
          }
        },
        {
          "$ref": "#/definitions/commonJoystickStyle"
        }
      ],
      "markdownDescription": "Styling overrides used when the control is in the `idle` state. In this state, the control is not being interacted with and is  considered neutral or resting."
    },
    "DeadzoneDirectionalPad": {
      "description": "Normalized radius of the directional pad region that will ignore inputs. This is useful to avoid unwanted changes in direction near the center of the directional pad where small input changes could drastically change the direction being activated. If omitted, a value of 0.25 is used. Note that changes to this value will change the way the directional pad is rendered to give an indication to the player of this size.",
      "anyOf": [
        {
          "exclusiveMinimum": 0,
          "type": "number",
          "exclusiveMaximum": 1
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Directional Pad Deadzone",
      "examples": [
        0.5,
        1,
        0,
        {
          "$ref": "#/definitions/dpadDeadzone"
        }
      ],
      "markdownDescription": "Normalized radius of the directional pad region that will ignore inputs. This is useful to avoid unwanted changes in direction near the center of the directional pad where small input changes could drastically change the direction being activated. If omitted, a value of 0.25 is used. Note that changes to this value will change the way the directional pad is rendered to give an indication to the player of this size."
    },
    "Sensitivity": {
      "description": "Multiplier value used to change the sensitivity of the control. This value must be greater than 0. If omitted, a default value of 1 is used.",
      "anyOf": [
        {
          "type": "number",
          "exclusiveMinimum": 0
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Sensitivity",
      "examples": [
        10,
        1.5,
        0.5,
        {
          "$ref": "../../context.json#/state/playerSensitivityPreference"
        }
      ],
      "markdownDescription": "Multiplier value used to change the sensitivity of the control. This value must be greater than 0. If omitted, a default value of 1 is used."
    },
    "_InputAxisZY": {
      "description": "Uses interactions in the Z and Y axis of the control to translate to the specified output. See the `output` property for more information on this mapping.",
      "title": "Z and Y Axis Input Mapping",
      "type": "string",
      "const": "axisZY",
      "markdownDescription": "Uses interactions in the Z and Y axis of the control to translate to the specified output. See the `output` property for more information on this mapping."
    },
    "_Touchpad": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/$defs/ControlEnabled"
        },
        "visible": {
          "$ref": "#/$defs/ControlVisibility"
        },
        "styles": {
          "$ref": "#/$defs/TouchpadStyles"
        },
        "axis": {
          "$ref": "#/$defs/AxisMapping2D"
        },
        "renderAsButton": {
          "$ref": "#/$defs/RenderAsButton"
        },
        "type": {
          "$ref": "#/$defs/_ControlTypeTouchpad"
        },
        "action": {
          "$ref": "#/$defs/ActionType"
        }
      },
      "examples": [
        {
          "axis": [
            {
              "input": "axisXY",
              "output": "relativeMouse"
            }
          ],
          "type": "touchpad",
          "styles": {
            "default": {
              "faceImage": {
                "type": "icon",
                "value": "look"
              }
            }
          }
        }
      ],
      "type": "object",
      "required": [
        "type",
        "axis"
      ]
    },
    "_SystemColorActionColor": {
      "description": "This property overrides the corresponding action system color used for styling components on controls where the `action` field is set to a non-gamepad action.",
      "title": "Action System Color Override",
      "$ref": "#/$defs/_ColorPaletteColor",
      "markdownDescription": "This property overrides the corresponding action system color used for styling components on controls where the `action` field is set to a non-gamepad action."
    },
    "LayoutUpperContent": {
      "description": "This property defines layout content that is fixed to the top edge of the available display space. Currently, only the top right space is available for controls to be added as the top left is reserved for the system quick access menu. Because the content in the upper right is not as easily accessible on larger devices, this space is best used for controls that only need accessed intermittently and not in the middle of game-play, like pulling up a pause menu or skipping cinematic moments.",
      "anyOf": [
        {
          "properties": {
            "right": {
              "$ref": "#/$defs/LayoutUpperRightContent"
            }
          },
          "additionalProperties": false,
          "type": "object"
        },
        {
          "$ref": "#/$defs/Reference"
        }
      ],
      "title": "Upper Layout Content",
      "examples": [
        {
          "right": [
            {
              "type": "button",
              "action": "menu"
            },
            {
              "type": "button",
              "action": "view"
            }
          ]
        },
        {
          "$ref": "../../context.json#/definitions/commonUpperControls"
        }
      ],
      "markdownDescription": "This property defines layout content that is fixed to the top edge of the available display space. Currently, only the top right space is available for controls to be added as the top left is reserved for the system quick access menu. Because the content in the upper right is not as easily accessible on larger devices, this space is best used for controls that only need accessed intermittently and not in the middle of game-play, like pulling up a pause menu or skipping cinematic moments."
    },
    "DeadzoneRadial": {
      "description": "Whether or not the deadzone threshold is calculated along the radial input component or against each axis individually.",
      "anyOf": [
        {
          "type": "boolean"
        }
      ],
      "title": "Radial",
      "examples": [
        true,
        false,
        {
          "$ref": "#/definitions/radialConfig"
        }
      ],
      "markdownDescription": "Whether or not the deadzone threshold is calculated along the radial input component or against each axis individually."
    }
  },
  "type": "object"
}